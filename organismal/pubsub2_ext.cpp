/* Generated by Cython 0.21 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_21"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__organismal__pubsub2_ext
#define __PYX_HAVE_API__organismal__pubsub2_ext
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "string.h"
#include <string>
#include <utility>
#include <random>
#include <boost/shared_ptr.hpp>
#include <boost/dynamic_bitset.hpp>
#include "pubsub2_c.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "organismal/pubsub2_ext.pyx",
  "stringsource",
  "stringsource",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen;
struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState;
struct __pyx_obj_10organismal_11pubsub2_ext_Factory;
struct __pyx_obj_10organismal_11pubsub2_ext_Network;
struct __pyx_obj_10organismal_11pubsub2_ext_Gene;
struct __pyx_obj_10organismal_11pubsub2_ext_CisModule;
struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection;
struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct____get__;
struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr;
struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__;
struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr;
struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__;

/* "organismal/pubsub2_ext.pyx":17
 * 
 * 
 * cdef class ChannelStateFrozen:             # <<<<<<<<<<<<<<
 *     cdef:
 *         cChannelState cchannel_state
 */
struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen {
  PyObject_HEAD
  struct __pyx_vtabstruct_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_vtab;
  pubsub2::cChannelState cchannel_state;
  pubsub2::cFactory_ptr cfactory_ptr;
};


/* "organismal/pubsub2_ext.pyx":74
 * 
 * 
 * cdef class ChannelState(ChannelStateFrozen):             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState {
  struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen __pyx_base;
};


/* "organismal/pubsub2_ext.pyx":101
 * 
 * 
 * cdef class Factory:             # <<<<<<<<<<<<<<
 *     cdef:
 *         cFactory_ptr cfactory_ptr
 */
struct __pyx_obj_10organismal_11pubsub2_ext_Factory {
  PyObject_HEAD
  pubsub2::cFactory_ptr cfactory_ptr;
  pubsub2::cFactory *cfactory;
  pubsub2::cGeneMutator *cmutator;
  PyObject *params;
  PyObject *_environments;
};


/* "organismal/pubsub2_ext.pyx":180
 *             return envs
 * 
 * cdef class Network:             # <<<<<<<<<<<<<<
 *     cdef:
 *         readonly:
 */
struct __pyx_obj_10organismal_11pubsub2_ext_Network {
  PyObject_HEAD
  struct __pyx_vtabstruct_10organismal_11pubsub2_ext_Network *__pyx_vtab;
  struct __pyx_obj_10organismal_11pubsub2_ext_Factory *factory;
  int ready;
  pubsub2::cNetwork_ptr ptr;
  pubsub2::cNetwork *cnetwork;
  PyObject *_genes;
  PyObject *_attractors;
};


/* "organismal/pubsub2_ext.pyx":257
 * 
 * 
 * cdef class Gene:             # <<<<<<<<<<<<<<
 *     """A proxy to a gene.
 *     """
 */
struct __pyx_obj_10organismal_11pubsub2_ext_Gene {
  PyObject_HEAD
  pubsub2::cGene *cgene;
  PyObject *_modules;
  struct __pyx_obj_10organismal_11pubsub2_ext_Network *network;
  size_t gene_number;
};


/* "organismal/pubsub2_ext.pyx":301
 * 
 * 
 * cdef class CisModule:             # <<<<<<<<<<<<<<
 *     """A proxy to a CisModule.
 *     """
 */
struct __pyx_obj_10organismal_11pubsub2_ext_CisModule {
  PyObject_HEAD
  pubsub2::cCisModule *ccismodule;
  struct __pyx_obj_10organismal_11pubsub2_ext_Gene *gene;
};


/* "organismal/pubsub2_ext.pyx":360
 * 
 * 
 * cdef class NetworkCollection:             # <<<<<<<<<<<<<<
 *     cdef:
 *         readonly:
 */
struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection {
  PyObject_HEAD
  struct __pyx_vtabstruct_10organismal_11pubsub2_ext_NetworkCollection *__pyx_vtab;
  struct __pyx_obj_10organismal_11pubsub2_ext_Factory *factory;
  pubsub2::cNetworkVector cnetworks;
};


/* "organismal/pubsub2_ext.pyx":218
 * 
 *     property genes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._genes is None:
 *                 self._genes = tuple(Gene(self, i) for i in range(self.gene_count))
 */
struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct____get__ {
  PyObject_HEAD
  struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_self;
};


/* "organismal/pubsub2_ext.pyx":220
 *         def __get__(self):
 *             if self._genes is None:
 *                 self._genes = tuple(Gene(self, i) for i in range(self.gene_count))             # <<<<<<<<<<<<<<
 *             return self._genes
 * 
 */
struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct____get__ *__pyx_outer_scope;
  PyObject *__pyx_v_i;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "organismal/pubsub2_ext.pyx":290
 * 
 *     property modules:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             # Lazy construction
 *             if self._modules is None:
 */
struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__ {
  PyObject_HEAD
  struct __pyx_obj_10organismal_11pubsub2_ext_Gene *__pyx_v_self;
};


/* "organismal/pubsub2_ext.pyx":293
 *             # Lazy construction
 *             if self._modules is None:
 *                 self._modules = tuple(CisModule(self, i) for i in range(self.module_count))             # <<<<<<<<<<<<<<
 *             return self._modules
 * 
 */
struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__ *__pyx_outer_scope;
  PyObject *__pyx_v_i;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "organismal/pubsub2_ext.pyx":399
 *         return self.get_at(i)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         for i in range(self.size):
 *             yield self.get_at(i)
 */
struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__ {
  PyObject_HEAD
  PyObject *__pyx_v_i;
  struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *__pyx_v_self;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};



/* "organismal/pubsub2_ext.pyx":17
 * 
 * 
 * cdef class ChannelStateFrozen:             # <<<<<<<<<<<<<<
 *     cdef:
 *         cChannelState cchannel_state
 */

struct __pyx_vtabstruct_10organismal_11pubsub2_ext_ChannelStateFrozen {
  PyObject *(*init)(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *, pubsub2::cFactory_ptr &, pubsub2::cChannelState &);
};
static struct __pyx_vtabstruct_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_vtabptr_10organismal_11pubsub2_ext_ChannelStateFrozen;


/* "organismal/pubsub2_ext.pyx":74
 * 
 * 
 * cdef class ChannelState(ChannelStateFrozen):             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */

struct __pyx_vtabstruct_10organismal_11pubsub2_ext_ChannelState {
  struct __pyx_vtabstruct_10organismal_11pubsub2_ext_ChannelStateFrozen __pyx_base;
};
static struct __pyx_vtabstruct_10organismal_11pubsub2_ext_ChannelState *__pyx_vtabptr_10organismal_11pubsub2_ext_ChannelState;


/* "organismal/pubsub2_ext.pyx":180
 *             return envs
 * 
 * cdef class Network:             # <<<<<<<<<<<<<<
 *     cdef:
 *         readonly:
 */

struct __pyx_vtabstruct_10organismal_11pubsub2_ext_Network {
  PyObject *(*bind_to)(struct __pyx_obj_10organismal_11pubsub2_ext_Network *, pubsub2::cNetwork_ptr &);
};
static struct __pyx_vtabstruct_10organismal_11pubsub2_ext_Network *__pyx_vtabptr_10organismal_11pubsub2_ext_Network;


/* "organismal/pubsub2_ext.pyx":360
 * 
 * 
 * cdef class NetworkCollection:             # <<<<<<<<<<<<<<
 *     cdef:
 *         readonly:
 */

struct __pyx_vtabstruct_10organismal_11pubsub2_ext_NetworkCollection {
  PyObject *(*get_at)(struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *, size_t);
};
static struct __pyx_vtabstruct_10organismal_11pubsub2_ext_NetworkCollection *__pyx_vtabptr_10organismal_11pubsub2_ext_NetworkCollection;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

#include <string.h>

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#include <new>

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static CYTHON_INLINE pubsub2::signal_t __Pyx_PyInt_As_pubsub2_3a__3a_signal_t(PyObject *);

static CYTHON_INLINE pubsub2::operand_t __Pyx_PyInt_As_pubsub2_3a__3a_operand_t(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_pubsub2_3a__3a_sequence_t(pubsub2::sequence_t value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_pubsub2_3a__3a_signal_t(pubsub2::signal_t value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

#define __Pyx_Generator_USED
#include <structmember.h>
#include <frameobject.h>
typedef PyObject *(*__pyx_generator_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_generator_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    int resume_label;
    char is_running;
} __pyx_GeneratorObject;
static __pyx_GeneratorObject *__Pyx_Generator_New(__pyx_generator_body_t body,
                                                  PyObject *closure, PyObject *name, PyObject *qualname);
static int __pyx_Generator_init(void);
static int __Pyx_Generator_clear(PyObject* self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

static int __Pyx_check_binary_version(void);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_10organismal_11pubsub2_ext_18ChannelStateFrozen_init(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_self, pubsub2::cFactory_ptr &__pyx_v_f, pubsub2::cChannelState &__pyx_v_p); /* proto*/
static PyObject *__pyx_f_10organismal_11pubsub2_ext_7Network_bind_to(struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_self, pubsub2::cNetwork_ptr &__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_10organismal_11pubsub2_ext_17NetworkCollection_get_at(struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *__pyx_v_self, size_t __pyx_v_i); /* proto*/

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'organismal._cpp' */

/* Module declarations from 'cython' */

/* Module declarations from 'organismal.pubsub2_ext' */
static PyTypeObject *__pyx_ptype_10organismal_11pubsub2_ext_ChannelStateFrozen = 0;
static PyTypeObject *__pyx_ptype_10organismal_11pubsub2_ext_ChannelState = 0;
static PyTypeObject *__pyx_ptype_10organismal_11pubsub2_ext_Factory = 0;
static PyTypeObject *__pyx_ptype_10organismal_11pubsub2_ext_Network = 0;
static PyTypeObject *__pyx_ptype_10organismal_11pubsub2_ext_Gene = 0;
static PyTypeObject *__pyx_ptype_10organismal_11pubsub2_ext_CisModule = 0;
static PyTypeObject *__pyx_ptype_10organismal_11pubsub2_ext_NetworkCollection = 0;
static PyTypeObject *__pyx_ptype_10organismal_11pubsub2_ext___pyx_scope_struct____get__ = 0;
static PyTypeObject *__pyx_ptype_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__ = 0;
static PyTypeObject *__pyx_ptype_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr = 0;
static PyTypeObject *__pyx_ptype_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__ = 0;
static PyObject *__pyx_convert_string_to_py_(std::string const &); /*proto*/
static std::vector<pubsub2::operand_t>  __pyx_convert_vector_from_py_pubsub2_3a__3a_operand_t(PyObject *); /*proto*/
static std::pair<size_t,size_t>  __pyx_convert_pair_from_py_size_t____size_t(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "organismal.pubsub2_ext"
int __pyx_module_is_main_organismal__pubsub2_ext = 0;

/* Implementation of 'organismal.pubsub2_ext' */
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_IndexError;
static int __pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen___cinit__(CYTHON_UNUSED struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_2test(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_self, size_t __pyx_v_i); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_4__getitem__(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_self, size_t __pyx_v_i); /* proto */
#if PY_MAJOR_VERSION < 3
static int __pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_6__cmp__(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_other); /* proto */
#endif
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_4size___get__(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_8__str__(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_10__copy__(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_12copy(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_14__repr__(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_self); /* proto */
static int __pyx_pf_10organismal_11pubsub2_ext_12ChannelState___cinit__(CYTHON_UNUSED struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_12ChannelState_2set(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *__pyx_v_self, size_t __pyx_v_i); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_12ChannelState_4reset(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *__pyx_v_self, size_t __pyx_v_i); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_12ChannelState_6flip(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *__pyx_v_self, size_t __pyx_v_i); /* proto */
static int __pyx_pf_10organismal_11pubsub2_ext_12ChannelState_8__setitem__(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *__pyx_v_self, size_t __pyx_v_i, int __pyx_v_b); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_12ChannelState_10merge(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_12ChannelState_12__repr__(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *__pyx_v_self); /* proto */
static int __pyx_pf_10organismal_11pubsub2_ext_7Factory___cinit__(struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_self, PyObject *__pyx_v_params); /* proto */
static void __pyx_pf_10organismal_11pubsub2_ext_7Factory_2__dealloc__(struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Factory_4create_state(struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Factory_6create_network(struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Factory_8create_collection(struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_self, size_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Factory_10mutate_network(struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Factory_12environments___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Factory_6params___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_self); /* proto */
static int __pyx_pf_10organismal_11pubsub2_ext_7Network___cinit__(struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_factory); /* proto */
static void __pyx_pf_10organismal_11pubsub2_ext_7Network_2__dealloc__(struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Network_10identifier___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Network_10gene_count___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Network_5genes_7__get___genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Network_5genes___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Network_4cycle(struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Network_10attractors___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Network_7factory___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Network_5ready___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_self); /* proto */
static int __pyx_pf_10organismal_11pubsub2_ext_4Gene___cinit__(struct __pyx_obj_10organismal_11pubsub2_ext_Gene *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_n, size_t __pyx_v_g); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_4Gene_8sequence___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Gene *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_4Gene_3pub___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Gene *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_4Gene_12module_count___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Gene *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_4Gene_7modules_7__get___genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_4Gene_7modules___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Gene *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_4Gene_2__repr__(struct __pyx_obj_10organismal_11pubsub2_ext_Gene *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_4Gene_7network___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Gene *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_4Gene_11gene_number___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Gene *__pyx_v_self); /* proto */
static int __pyx_pf_10organismal_11pubsub2_ext_9CisModule___cinit__(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_Gene *__pyx_v_g, size_t __pyx_v_i); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_9CisModule_4sub1___get__(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self); /* proto */
static int __pyx_pf_10organismal_11pubsub2_ext_9CisModule_4sub1_2__set__(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self, pubsub2::signal_t __pyx_v_val); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_9CisModule_4sub2___get__(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self); /* proto */
static int __pyx_pf_10organismal_11pubsub2_ext_9CisModule_4sub2_2__set__(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self, pubsub2::signal_t __pyx_v_val); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_9CisModule_2op___get__(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self); /* proto */
static int __pyx_pf_10organismal_11pubsub2_ext_9CisModule_2op_2__set__(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self, pubsub2::operand_t __pyx_v_val); /* proto */
#if PY_MAJOR_VERSION < 3
static int __pyx_pf_10organismal_11pubsub2_ext_9CisModule_2__cmp__(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_other); /* proto */
#endif
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_9CisModule_4test(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self, unsigned int __pyx_v_a, unsigned int __pyx_v_b); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_9CisModule_6active(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_9CisModule_8__repr__(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_9CisModule_4gene___get__(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self); /* proto */
static int __pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection___cinit__(struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_factory); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection_2add(struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection_4size___get__(struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection_4__getitem__(struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *__pyx_v_self, size_t __pyx_v_i); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection_6__iter__(struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection_9__repr__(struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection_11mutate(struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection_7factory___get__(struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext_ChannelStateFrozen(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext_ChannelState(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext_Factory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext_Network(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext_Gene(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext_CisModule(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext_NetworkCollection(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext___pyx_scope_struct____get__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_a[] = "a";
static char __pyx_k_b[] = "b";
static char __pyx_k_g[] = "g";
static char __pyx_k_i[] = "i";
static char __pyx_k_n[] = "n";
static char __pyx_k__2[] = "|";
static char __pyx_k_op[] = "op";
static char __pyx_k_pub[] = "pub";
static char __pyx_k_str[] = "__str__";
static char __pyx_k_Gene[] = "<Gene[{}]: {}>";
static char __pyx_k_args[] = "args";
static char __pyx_k_copy[] = "__copy__";
static char __pyx_k_iter[] = "__iter__";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_name[] = "name";
static char __pyx_k_seed[] = "seed";
static char __pyx_k_send[] = "send";
static char __pyx_k_size[] = "size";
static char __pyx_k_sub1[] = "sub1";
static char __pyx_k_sub2[] = "sub2";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_close[] = "close";
static char __pyx_k_range[] = "range";
static char __pyx_k_throw[] = "throw";
static char __pyx_k_format[] = "format";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_params[] = "params";
static char __pyx_k_Operand[] = "Operand";
static char __pyx_k_factory[] = "factory";
static char __pyx_k_genexpr[] = "genexpr";
static char __pyx_k_operand[] = "operand";
static char __pyx_k_operands[] = "operands";
static char __pyx_k_sequence[] = "sequence";
static char __pyx_k_CisModule[] = "<CisModule: {}, {}, {}>";
static char __pyx_k_cis_count[] = "cis_count";
static char __pyx_k_pub_range[] = "pub_range";
static char __pyx_k_sub_range[] = "sub_range";
static char __pyx_k_IndexError[] = "IndexError";
static char __pyx_k_gene_count[] = "gene_count";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_ChannelState[] = "<ChannelState: {}>";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_cue_channels[] = "cue_channels";
static char __pyx_k_module_count[] = "module_count";
static char __pyx_k_out_channels[] = "out_channels";
static char __pyx_k_reg_channels[] = "reg_channels";
static char __pyx_k_name_for_channel[] = "name_for_channel";
static char __pyx_k_NetworkCollection[] = "<NetworkCollection: {}>";
static char __pyx_k_ChannelStateFrozen[] = "<ChannelStateFrozen: {}>";
static char __pyx_k_gene_mutation_rate[] = "gene_mutation_rate";
static char __pyx_k_NetworkCollection___iter[] = "NetworkCollection.__iter__";
static char __pyx_k_Gene___get___locals_genexpr[] = "Gene.__get__.<locals>.genexpr";
static char __pyx_k_Network___get___locals_genexpr[] = "Network.__get__.<locals>.genexpr";
static char __pyx_k_A_tuple_containing_the_attractor[] = "A tuple containing the attractors for each environment";
static PyObject *__pyx_kp_s_ChannelState;
static PyObject *__pyx_kp_s_ChannelStateFrozen;
static PyObject *__pyx_kp_s_CisModule;
static PyObject *__pyx_kp_s_Gene;
static PyObject *__pyx_n_s_Gene___get___locals_genexpr;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_NetworkCollection;
static PyObject *__pyx_n_s_NetworkCollection___iter;
static PyObject *__pyx_n_s_Network___get___locals_genexpr;
static PyObject *__pyx_n_s_Operand;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_cis_count;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_cue_channels;
static PyObject *__pyx_n_s_factory;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_g;
static PyObject *__pyx_n_s_gene_count;
static PyObject *__pyx_n_s_gene_mutation_rate;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_module_count;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_for_channel;
static PyObject *__pyx_n_s_op;
static PyObject *__pyx_n_s_operand;
static PyObject *__pyx_n_s_operands;
static PyObject *__pyx_n_s_out_channels;
static PyObject *__pyx_n_s_params;
static PyObject *__pyx_n_s_pub;
static PyObject *__pyx_n_s_pub_range;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reg_channels;
static PyObject *__pyx_n_s_seed;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_sequence;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_n_s_sub1;
static PyObject *__pyx_n_s_sub2;
static PyObject *__pyx_n_s_sub_range;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_slice_;

/* "organismal/pubsub2_ext.pyx":22
 *         cFactory_ptr cfactory_ptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen___cinit__(((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen___cinit__(CYTHON_UNUSED struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":25
 *         pass
 * 
 *     cdef init(self, cFactory_ptr &f, cChannelState &p):             # <<<<<<<<<<<<<<
 *         self.cfactory_ptr = f
 *         self.cchannel_state = p
 */

static PyObject *__pyx_f_10organismal_11pubsub2_ext_18ChannelStateFrozen_init(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_self, pubsub2::cFactory_ptr &__pyx_v_f, pubsub2::cChannelState &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "organismal/pubsub2_ext.pyx":26
 * 
 *     cdef init(self, cFactory_ptr &f, cChannelState &p):
 *         self.cfactory_ptr = f             # <<<<<<<<<<<<<<
 *         self.cchannel_state = p
 * 
 */
  __pyx_v_self->cfactory_ptr = __pyx_v_f;

  /* "organismal/pubsub2_ext.pyx":27
 *     cdef init(self, cFactory_ptr &f, cChannelState &p):
 *         self.cfactory_ptr = f
 *         self.cchannel_state = p             # <<<<<<<<<<<<<<
 * 
 *     def test(self, size_t i):
 */
  __pyx_v_self->cchannel_state = __pyx_v_p;

  /* "organismal/pubsub2_ext.pyx":25
 *         pass
 * 
 *     cdef init(self, cFactory_ptr &f, cChannelState &p):             # <<<<<<<<<<<<<<
 *         self.cfactory_ptr = f
 *         self.cchannel_state = p
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":29
 *         self.cchannel_state = p
 * 
 *     def test(self, size_t i):             # <<<<<<<<<<<<<<
 *         return self.cchannel_state.test(i)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_3test(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_3test(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  size_t __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("test (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_size_t(__pyx_arg_i); if (unlikely((__pyx_v_i == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.ChannelStateFrozen.test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_2test(((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *)__pyx_v_self), ((size_t)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_2test(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_self, size_t __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("test", 0);

  /* "organismal/pubsub2_ext.pyx":30
 * 
 *     def test(self, size_t i):
 *         return self.cchannel_state.test(i)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, size_t i):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->cchannel_state.test(__pyx_v_i)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":29
 *         self.cchannel_state = p
 * 
 *     def test(self, size_t i):             # <<<<<<<<<<<<<<
 *         return self.cchannel_state.test(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("organismal.pubsub2_ext.ChannelStateFrozen.test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":32
 *         return self.cchannel_state.test(i)
 * 
 *     def __getitem__(self, size_t i):             # <<<<<<<<<<<<<<
 *         return self.cchannel_state.test(i)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  size_t __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_size_t(__pyx_arg_i); if (unlikely((__pyx_v_i == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.ChannelStateFrozen.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_4__getitem__(((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *)__pyx_v_self), ((size_t)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_4__getitem__(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_self, size_t __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "organismal/pubsub2_ext.pyx":33
 * 
 *     def __getitem__(self, size_t i):
 *         return self.cchannel_state.test(i)             # <<<<<<<<<<<<<<
 * 
 *     def __cmp__(self, ChannelStateFrozen other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->cchannel_state.test(__pyx_v_i)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":32
 *         return self.cchannel_state.test(i)
 * 
 *     def __getitem__(self, size_t i):             # <<<<<<<<<<<<<<
 *         return self.cchannel_state.test(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("organismal.pubsub2_ext.ChannelStateFrozen.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":35
 *         return self.cchannel_state.test(i)
 * 
 *     def __cmp__(self, ChannelStateFrozen other):             # <<<<<<<<<<<<<<
 *         return bitset_cmp(self.cchannel_state, other.cchannel_state)
 * 
 */

/* Python wrapper */
#if PY_MAJOR_VERSION < 3
static int __pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_7__cmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static int __pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_7__cmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cmp__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_10organismal_11pubsub2_ext_ChannelStateFrozen, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_6__cmp__(((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *)__pyx_v_self), ((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_MAJOR_VERSION < 3)*/

#if PY_MAJOR_VERSION < 3
static int __pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_6__cmp__(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_other) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cmp__", 0);

  /* "organismal/pubsub2_ext.pyx":36
 * 
 *     def __cmp__(self, ChannelStateFrozen other):
 *         return bitset_cmp(self.cchannel_state, other.cchannel_state)             # <<<<<<<<<<<<<<
 * 
 *     property size:
 */
  __pyx_r = pubsub2::bitset_cmp(__pyx_v_self->cchannel_state, __pyx_v_other->cchannel_state);
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":35
 *         return self.cchannel_state.test(i)
 * 
 *     def __cmp__(self, ChannelStateFrozen other):             # <<<<<<<<<<<<<<
 *         return bitset_cmp(self.cchannel_state, other.cchannel_state)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_MAJOR_VERSION < 3)*/

/* "organismal/pubsub2_ext.pyx":39
 * 
 *     property size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.cchannel_state.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_4size___get__(((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_4size___get__(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "organismal/pubsub2_ext.pyx":40
 *     property size:
 *         def __get__(self):
 *             return self.cchannel_state.size()             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->cchannel_state.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":39
 * 
 *     property size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.cchannel_state.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("organismal.pubsub2_ext.ChannelStateFrozen.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":42
 *             return self.cchannel_state.size()
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             string cstr
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_9__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_9__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_8__str__(((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_8__str__(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_self) {
  std::string __pyx_v_cstr;
  pubsub2::cFactory *__pyx_v_f;
  size_t __pyx_v_cuereg;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_env = NULL;
  PyObject *__pyx_v_reg = NULL;
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "organismal/pubsub2_ext.pyx":45
 *         cdef:
 *             string cstr
 *             cFactory *f = self.cfactory_ptr.get()             # <<<<<<<<<<<<<<
 * 
 *         if f == NULL:
 */
  __pyx_v_f = __pyx_v_self->cfactory_ptr.get();

  /* "organismal/pubsub2_ext.pyx":47
 *             cFactory *f = self.cfactory_ptr.get()
 * 
 *         if f == NULL:             # <<<<<<<<<<<<<<
 *             # TODO: Some property exceptions would be good...
 *             raise RuntimeError
 */
  __pyx_t_1 = ((__pyx_v_f == NULL) != 0);
  if (__pyx_t_1) {

    /* "organismal/pubsub2_ext.pyx":49
 *         if f == NULL:
 *             # TODO: Some property exceptions would be good...
 *             raise RuntimeError             # <<<<<<<<<<<<<<
 * 
 *         cdef size_t cuereg = f.cue_channels + f.reg_channels
 */
    __Pyx_Raise(__pyx_builtin_RuntimeError, 0, 0, 0);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "organismal/pubsub2_ext.pyx":51
 *             raise RuntimeError
 * 
 *         cdef size_t cuereg = f.cue_channels + f.reg_channels             # <<<<<<<<<<<<<<
 * 
 *         to_string(self.cchannel_state, cstr)
 */
  __pyx_v_cuereg = (__pyx_v_f->cue_channels + __pyx_v_f->reg_channels);

  /* "organismal/pubsub2_ext.pyx":53
 *         cdef size_t cuereg = f.cue_channels + f.reg_channels
 * 
 *         to_string(self.cchannel_state, cstr)             # <<<<<<<<<<<<<<
 *         # I think it is much easier to understand if we reverse it
 *         s = cstr[::-1]
 */
  boost::to_string(__pyx_v_self->cchannel_state, __pyx_v_cstr);

  /* "organismal/pubsub2_ext.pyx":55
 *         to_string(self.cchannel_state, cstr)
 *         # I think it is much easier to understand if we reverse it
 *         s = cstr[::-1]             # <<<<<<<<<<<<<<
 *         env = s[:f.cue_channels]
 *         reg = s[f.cue_channels:cuereg]
 */
  __pyx_t_2 = __pyx_convert_string_to_py_(__pyx_v_cstr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_2, __pyx_slice_); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_s = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "organismal/pubsub2_ext.pyx":56
 *         # I think it is much easier to understand if we reverse it
 *         s = cstr[::-1]
 *         env = s[:f.cue_channels]             # <<<<<<<<<<<<<<
 *         reg = s[f.cue_channels:cuereg]
 *         out = s[cuereg:]
 */
  __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_v_s, 0, __pyx_v_f->cue_channels, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_env = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "organismal/pubsub2_ext.pyx":57
 *         s = cstr[::-1]
 *         env = s[:f.cue_channels]
 *         reg = s[f.cue_channels:cuereg]             # <<<<<<<<<<<<<<
 *         out = s[cuereg:]
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_v_s, __pyx_v_f->cue_channels, __pyx_v_cuereg, NULL, NULL, NULL, 1, 1, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_reg = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "organismal/pubsub2_ext.pyx":58
 *         env = s[:f.cue_channels]
 *         reg = s[f.cue_channels:cuereg]
 *         out = s[cuereg:]             # <<<<<<<<<<<<<<
 * 
 *         return env + '|' + reg + '|' + out
 */
  __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_v_s, __pyx_v_cuereg, 0, NULL, NULL, NULL, 1, 0, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_out = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "organismal/pubsub2_ext.pyx":60
 *         out = s[cuereg:]
 * 
 *         return env + '|' + reg + '|' + out             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyNumber_Add(__pyx_v_env, __pyx_kp_s__2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_v_reg); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_v_out); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":42
 *             return self.cchannel_state.size()
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             string cstr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("organismal.pubsub2_ext.ChannelStateFrozen.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_env);
  __Pyx_XDECREF(__pyx_v_reg);
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":62
 *         return env + '|' + reg + '|' + out
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         other = ChannelState()
 *         other.init(self.cfactory_ptr, self.cchannel_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_11__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_11__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_10__copy__(((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_10__copy__(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_self) {
  struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *__pyx_v_other = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "organismal/pubsub2_ext.pyx":63
 * 
 *     def __copy__(self):
 *         other = ChannelState()             # <<<<<<<<<<<<<<
 *         other.init(self.cfactory_ptr, self.cchannel_state)
 *         return other
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_10organismal_11pubsub2_ext_ChannelState)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_other = ((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "organismal/pubsub2_ext.pyx":64
 *     def __copy__(self):
 *         other = ChannelState()
 *         other.init(self.cfactory_ptr, self.cchannel_state)             # <<<<<<<<<<<<<<
 *         return other
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10organismal_11pubsub2_ext_ChannelState *)__pyx_v_other->__pyx_base.__pyx_vtab)->__pyx_base.init(((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *)__pyx_v_other), __pyx_v_self->cfactory_ptr, __pyx_v_self->cchannel_state); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "organismal/pubsub2_ext.pyx":65
 *         other = ChannelState()
 *         other.init(self.cfactory_ptr, self.cchannel_state)
 *         return other             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_other));
  __pyx_r = ((PyObject *)__pyx_v_other);
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":62
 *         return env + '|' + reg + '|' + out
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         other = ChannelState()
 *         other.init(self.cfactory_ptr, self.cchannel_state)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("organismal.pubsub2_ext.ChannelStateFrozen.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_other);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":67
 *         return other
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         return self.__copy__()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_13copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_13copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_12copy(((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_12copy(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "organismal/pubsub2_ext.pyx":68
 * 
 *     def copy(self):
 *         return self.__copy__()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":67
 *         return other
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         return self.__copy__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("organismal.pubsub2_ext.ChannelStateFrozen.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":70
 *         return self.__copy__()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<ChannelStateFrozen: {}>".format(self.__str__())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_15__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_15__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_14__repr__(((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_18ChannelStateFrozen_14__repr__(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "organismal/pubsub2_ext.pyx":71
 * 
 *     def __repr__(self):
 *         return "<ChannelStateFrozen: {}>".format(self.__str__())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_ChannelStateFrozen, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_str); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":70
 *         return self.__copy__()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<ChannelStateFrozen: {}>".format(self.__str__())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("organismal.pubsub2_ext.ChannelStateFrozen.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":76
 * cdef class ChannelState(ChannelStateFrozen):
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_10organismal_11pubsub2_ext_12ChannelState_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10organismal_11pubsub2_ext_12ChannelState_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_12ChannelState___cinit__(((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10organismal_11pubsub2_ext_12ChannelState___cinit__(CYTHON_UNUSED struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":79
 *         pass
 * 
 *     def set(self, size_t i):             # <<<<<<<<<<<<<<
 *         self.cchannel_state.set(i)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_12ChannelState_3set(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_12ChannelState_3set(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  size_t __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_size_t(__pyx_arg_i); if (unlikely((__pyx_v_i == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.ChannelState.set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_12ChannelState_2set(((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *)__pyx_v_self), ((size_t)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_12ChannelState_2set(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *__pyx_v_self, size_t __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set", 0);

  /* "organismal/pubsub2_ext.pyx":80
 * 
 *     def set(self, size_t i):
 *         self.cchannel_state.set(i)             # <<<<<<<<<<<<<<
 * 
 *     def reset(self, size_t i):
 */
  __pyx_v_self->__pyx_base.cchannel_state.set(__pyx_v_i);

  /* "organismal/pubsub2_ext.pyx":79
 *         pass
 * 
 *     def set(self, size_t i):             # <<<<<<<<<<<<<<
 *         self.cchannel_state.set(i)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":82
 *         self.cchannel_state.set(i)
 * 
 *     def reset(self, size_t i):             # <<<<<<<<<<<<<<
 *         self.cchannel_state.reset(i)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_12ChannelState_5reset(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_12ChannelState_5reset(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  size_t __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_size_t(__pyx_arg_i); if (unlikely((__pyx_v_i == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.ChannelState.reset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_12ChannelState_4reset(((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *)__pyx_v_self), ((size_t)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_12ChannelState_4reset(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *__pyx_v_self, size_t __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset", 0);

  /* "organismal/pubsub2_ext.pyx":83
 * 
 *     def reset(self, size_t i):
 *         self.cchannel_state.reset(i)             # <<<<<<<<<<<<<<
 * 
 *     def flip(self, size_t i):
 */
  __pyx_v_self->__pyx_base.cchannel_state.reset(__pyx_v_i);

  /* "organismal/pubsub2_ext.pyx":82
 *         self.cchannel_state.set(i)
 * 
 *     def reset(self, size_t i):             # <<<<<<<<<<<<<<
 *         self.cchannel_state.reset(i)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":85
 *         self.cchannel_state.reset(i)
 * 
 *     def flip(self, size_t i):             # <<<<<<<<<<<<<<
 *         self.cchannel_state.flip(i)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_12ChannelState_7flip(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_12ChannelState_7flip(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  size_t __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flip (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_size_t(__pyx_arg_i); if (unlikely((__pyx_v_i == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.ChannelState.flip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_12ChannelState_6flip(((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *)__pyx_v_self), ((size_t)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_12ChannelState_6flip(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *__pyx_v_self, size_t __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flip", 0);

  /* "organismal/pubsub2_ext.pyx":86
 * 
 *     def flip(self, size_t i):
 *         self.cchannel_state.flip(i)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, size_t i, bint b):
 */
  __pyx_v_self->__pyx_base.cchannel_state.flip(__pyx_v_i);

  /* "organismal/pubsub2_ext.pyx":85
 *         self.cchannel_state.reset(i)
 * 
 *     def flip(self, size_t i):             # <<<<<<<<<<<<<<
 *         self.cchannel_state.flip(i)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":88
 *         self.cchannel_state.flip(i)
 * 
 *     def __setitem__(self, size_t i, bint b):             # <<<<<<<<<<<<<<
 *         if b:
 *             self.cchannel_state.set(i)
 */

/* Python wrapper */
static int __pyx_pw_10organismal_11pubsub2_ext_12ChannelState_9__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i, PyObject *__pyx_arg_b); /*proto*/
static int __pyx_pw_10organismal_11pubsub2_ext_12ChannelState_9__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i, PyObject *__pyx_arg_b) {
  size_t __pyx_v_i;
  int __pyx_v_b;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_size_t(__pyx_arg_i); if (unlikely((__pyx_v_i == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  assert(__pyx_arg_b); {
    __pyx_v_b = __Pyx_PyObject_IsTrue(__pyx_arg_b); if (unlikely((__pyx_v_b == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.ChannelState.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_12ChannelState_8__setitem__(((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *)__pyx_v_self), ((size_t)__pyx_v_i), ((int)__pyx_v_b));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10organismal_11pubsub2_ext_12ChannelState_8__setitem__(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *__pyx_v_self, size_t __pyx_v_i, int __pyx_v_b) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "organismal/pubsub2_ext.pyx":89
 * 
 *     def __setitem__(self, size_t i, bint b):
 *         if b:             # <<<<<<<<<<<<<<
 *             self.cchannel_state.set(i)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_b != 0);
  if (__pyx_t_1) {

    /* "organismal/pubsub2_ext.pyx":90
 *     def __setitem__(self, size_t i, bint b):
 *         if b:
 *             self.cchannel_state.set(i)             # <<<<<<<<<<<<<<
 *         else:
 *             self.cchannel_state.reset(i)
 */
    __pyx_v_self->__pyx_base.cchannel_state.set(__pyx_v_i);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "organismal/pubsub2_ext.pyx":92
 *             self.cchannel_state.set(i)
 *         else:
 *             self.cchannel_state.reset(i)             # <<<<<<<<<<<<<<
 * 
 *     def merge(self, ChannelStateFrozen other):
 */
    __pyx_v_self->__pyx_base.cchannel_state.reset(__pyx_v_i);
  }
  __pyx_L3:;

  /* "organismal/pubsub2_ext.pyx":88
 *         self.cchannel_state.flip(i)
 * 
 *     def __setitem__(self, size_t i, bint b):             # <<<<<<<<<<<<<<
 *         if b:
 *             self.cchannel_state.set(i)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":94
 *             self.cchannel_state.reset(i)
 * 
 *     def merge(self, ChannelStateFrozen other):             # <<<<<<<<<<<<<<
 *         self.cchannel_state |= other.cchannel_state
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_12ChannelState_11merge(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_12ChannelState_11merge(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("merge (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_10organismal_11pubsub2_ext_ChannelStateFrozen, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_12ChannelState_10merge(((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *)__pyx_v_self), ((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_12ChannelState_10merge(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("merge", 0);

  /* "organismal/pubsub2_ext.pyx":95
 * 
 *     def merge(self, ChannelStateFrozen other):
 *         self.cchannel_state |= other.cchannel_state             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_v_self->__pyx_base.cchannel_state |= __pyx_v_other->cchannel_state;

  /* "organismal/pubsub2_ext.pyx":94
 *             self.cchannel_state.reset(i)
 * 
 *     def merge(self, ChannelStateFrozen other):             # <<<<<<<<<<<<<<
 *         self.cchannel_state |= other.cchannel_state
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":97
 *         self.cchannel_state |= other.cchannel_state
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<ChannelState: {}>".format(self.__str__())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_12ChannelState_13__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_12ChannelState_13__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_12ChannelState_12__repr__(((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_12ChannelState_12__repr__(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "organismal/pubsub2_ext.pyx":98
 * 
 *     def __repr__(self):
 *         return "<ChannelState: {}>".format(self.__str__())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_ChannelState, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_str); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":97
 *         self.cchannel_state |= other.cchannel_state
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<ChannelState: {}>".format(self.__str__())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("organismal.pubsub2_ext.ChannelState.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":111
 *         object _environments
 * 
 *     def __cinit__(self, params):             # <<<<<<<<<<<<<<
 *         self.params = params
 *         self.cfactory_ptr = cFactory_ptr(new cFactory(params.seed))
 */

/* Python wrapper */
static int __pyx_pw_10organismal_11pubsub2_ext_7Factory_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10organismal_11pubsub2_ext_7Factory_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_params = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_params,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_params)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_params = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.Factory.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_7Factory___cinit__(((struct __pyx_obj_10organismal_11pubsub2_ext_Factory *)__pyx_v_self), __pyx_v_params);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10organismal_11pubsub2_ext_7Factory___cinit__(struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_self, PyObject *__pyx_v_params) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  pubsub2::cOperands __pyx_t_3;
  std::pair<size_t,size_t>  __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "organismal/pubsub2_ext.pyx":112
 * 
 *     def __cinit__(self, params):
 *         self.params = params             # <<<<<<<<<<<<<<
 *         self.cfactory_ptr = cFactory_ptr(new cFactory(params.seed))
 *         self.cfactory = self.cfactory_ptr.get()
 */
  __Pyx_INCREF(__pyx_v_params);
  __Pyx_GIVEREF(__pyx_v_params);
  __Pyx_GOTREF(__pyx_v_self->params);
  __Pyx_DECREF(__pyx_v_self->params);
  __pyx_v_self->params = __pyx_v_params;

  /* "organismal/pubsub2_ext.pyx":113
 *     def __cinit__(self, params):
 *         self.params = params
 *         self.cfactory_ptr = cFactory_ptr(new cFactory(params.seed))             # <<<<<<<<<<<<<<
 *         self.cfactory = self.cfactory_ptr.get()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_params, __pyx_n_s_seed); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->cfactory_ptr = pubsub2::cFactory_ptr(new pubsub2::cFactory(__pyx_t_2));

  /* "organismal/pubsub2_ext.pyx":114
 *         self.params = params
 *         self.cfactory_ptr = cFactory_ptr(new cFactory(params.seed))
 *         self.cfactory = self.cfactory_ptr.get()             # <<<<<<<<<<<<<<
 * 
 *         # Now translate everything to cpp -- this needs to be done first.
 */
  __pyx_v_self->cfactory = __pyx_v_self->cfactory_ptr.get();

  /* "organismal/pubsub2_ext.pyx":118
 *         # Now translate everything to cpp -- this needs to be done first.
 *         # There is automatic conversion for most of this (stl::vector etc)
 *         self.cfactory.gene_count = params.gene_count             # <<<<<<<<<<<<<<
 *         self.cfactory.cis_count = params.cis_count
 *         self.cfactory.operands = params.operands
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_params, __pyx_n_s_gene_count); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->cfactory->gene_count = __pyx_t_2;

  /* "organismal/pubsub2_ext.pyx":119
 *         # There is automatic conversion for most of this (stl::vector etc)
 *         self.cfactory.gene_count = params.gene_count
 *         self.cfactory.cis_count = params.cis_count             # <<<<<<<<<<<<<<
 *         self.cfactory.operands = params.operands
 *         self.cfactory.sub_range = params.sub_range
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_params, __pyx_n_s_cis_count); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->cfactory->cis_count = __pyx_t_2;

  /* "organismal/pubsub2_ext.pyx":120
 *         self.cfactory.gene_count = params.gene_count
 *         self.cfactory.cis_count = params.cis_count
 *         self.cfactory.operands = params.operands             # <<<<<<<<<<<<<<
 *         self.cfactory.sub_range = params.sub_range
 *         self.cfactory.pub_range = params.pub_range
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_params, __pyx_n_s_operands); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_convert_vector_from_py_pubsub2_3a__3a_operand_t(__pyx_t_1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->cfactory->operands = __pyx_t_3;

  /* "organismal/pubsub2_ext.pyx":121
 *         self.cfactory.cis_count = params.cis_count
 *         self.cfactory.operands = params.operands
 *         self.cfactory.sub_range = params.sub_range             # <<<<<<<<<<<<<<
 *         self.cfactory.pub_range = params.pub_range
 *         self.cfactory.cue_channels = params.cue_channels
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_params, __pyx_n_s_sub_range); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_convert_pair_from_py_size_t____size_t(__pyx_t_1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->cfactory->sub_range = __pyx_t_4;

  /* "organismal/pubsub2_ext.pyx":122
 *         self.cfactory.operands = params.operands
 *         self.cfactory.sub_range = params.sub_range
 *         self.cfactory.pub_range = params.pub_range             # <<<<<<<<<<<<<<
 *         self.cfactory.cue_channels = params.cue_channels
 *         self.cfactory.reg_channels = params.reg_channels
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_params, __pyx_n_s_pub_range); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_convert_pair_from_py_size_t____size_t(__pyx_t_1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->cfactory->pub_range = __pyx_t_4;

  /* "organismal/pubsub2_ext.pyx":123
 *         self.cfactory.sub_range = params.sub_range
 *         self.cfactory.pub_range = params.pub_range
 *         self.cfactory.cue_channels = params.cue_channels             # <<<<<<<<<<<<<<
 *         self.cfactory.reg_channels = params.reg_channels
 *         self.cfactory.out_channels = params.out_channels
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_params, __pyx_n_s_cue_channels); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->cfactory->cue_channels = __pyx_t_2;

  /* "organismal/pubsub2_ext.pyx":124
 *         self.cfactory.pub_range = params.pub_range
 *         self.cfactory.cue_channels = params.cue_channels
 *         self.cfactory.reg_channels = params.reg_channels             # <<<<<<<<<<<<<<
 *         self.cfactory.out_channels = params.out_channels
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_params, __pyx_n_s_reg_channels); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->cfactory->reg_channels = __pyx_t_2;

  /* "organismal/pubsub2_ext.pyx":125
 *         self.cfactory.cue_channels = params.cue_channels
 *         self.cfactory.reg_channels = params.reg_channels
 *         self.cfactory.out_channels = params.out_channels             # <<<<<<<<<<<<<<
 * 
 *         self.cfactory.init_environments()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_params, __pyx_n_s_out_channels); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->cfactory->out_channels = __pyx_t_2;

  /* "organismal/pubsub2_ext.pyx":127
 *         self.cfactory.out_channels = params.out_channels
 * 
 *         self.cfactory.init_environments()             # <<<<<<<<<<<<<<
 * 
 *         # Create a mutator
 */
  __pyx_v_self->cfactory->init_environments();

  /* "organismal/pubsub2_ext.pyx":130
 * 
 *         # Create a mutator
 *         self.cmutator = new cGeneMutator(self.cfactory, params.gene_mutation_rate)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_params, __pyx_n_s_gene_mutation_rate); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->cmutator = new pubsub2::cGeneMutator(__pyx_v_self->cfactory, __pyx_t_5);

  /* "organismal/pubsub2_ext.pyx":111
 *         object _environments
 * 
 *     def __cinit__(self, params):             # <<<<<<<<<<<<<<
 *         self.params = params
 *         self.cfactory_ptr = cFactory_ptr(new cFactory(params.seed))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("organismal.pubsub2_ext.Factory.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":132
 *         self.cmutator = new cGeneMutator(self.cfactory, params.gene_mutation_rate)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.cmutator
 * 
 */

/* Python wrapper */
static void __pyx_pw_10organismal_11pubsub2_ext_7Factory_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_10organismal_11pubsub2_ext_7Factory_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_10organismal_11pubsub2_ext_7Factory_2__dealloc__(((struct __pyx_obj_10organismal_11pubsub2_ext_Factory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_10organismal_11pubsub2_ext_7Factory_2__dealloc__(struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "organismal/pubsub2_ext.pyx":133
 * 
 *     def __dealloc__(self):
 *         del self.cmutator             # <<<<<<<<<<<<<<
 * 
 *     def create_state(self):
 */
  delete __pyx_v_self->cmutator;

  /* "organismal/pubsub2_ext.pyx":132
 *         self.cmutator = new cGeneMutator(self.cfactory, params.gene_mutation_rate)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.cmutator
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "organismal/pubsub2_ext.pyx":135
 *         del self.cmutator
 * 
 *     def create_state(self):             # <<<<<<<<<<<<<<
 *         c = ChannelState()
 *         c.cchannel_state.resize(self.cfactory.total_channels)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Factory_5create_state(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Factory_5create_state(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_state (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_7Factory_4create_state(((struct __pyx_obj_10organismal_11pubsub2_ext_Factory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Factory_4create_state(struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_self) {
  struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  pubsub2::cFactory_ptr __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_state", 0);

  /* "organismal/pubsub2_ext.pyx":136
 * 
 *     def create_state(self):
 *         c = ChannelState()             # <<<<<<<<<<<<<<
 *         c.cchannel_state.resize(self.cfactory.total_channels)
 *         c.cfactory_ptr = self.cfactory_ptr
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_10organismal_11pubsub2_ext_ChannelState)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_c = ((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "organismal/pubsub2_ext.pyx":137
 *     def create_state(self):
 *         c = ChannelState()
 *         c.cchannel_state.resize(self.cfactory.total_channels)             # <<<<<<<<<<<<<<
 *         c.cfactory_ptr = self.cfactory_ptr
 *         return c
 */
  __pyx_v_c->__pyx_base.cchannel_state.resize(__pyx_v_self->cfactory->total_channels);

  /* "organismal/pubsub2_ext.pyx":138
 *         c = ChannelState()
 *         c.cchannel_state.resize(self.cfactory.total_channels)
 *         c.cfactory_ptr = self.cfactory_ptr             # <<<<<<<<<<<<<<
 *         return c
 * 
 */
  __pyx_t_2 = __pyx_v_self->cfactory_ptr;
  __pyx_v_c->__pyx_base.cfactory_ptr = __pyx_t_2;

  /* "organismal/pubsub2_ext.pyx":139
 *         c.cchannel_state.resize(self.cfactory.total_channels)
 *         c.cfactory_ptr = self.cfactory_ptr
 *         return c             # <<<<<<<<<<<<<<
 * 
 *     def create_network(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":135
 *         del self.cmutator
 * 
 *     def create_state(self):             # <<<<<<<<<<<<<<
 *         c = ChannelState()
 *         c.cchannel_state.resize(self.cfactory.total_channels)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("organismal.pubsub2_ext.Factory.create_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":141
 *         return c
 * 
 *     def create_network(self):             # <<<<<<<<<<<<<<
 *         cdef cNetwork_ptr ptr = cNetwork_ptr(new cNetwork(self.cfactory_ptr))
 *         self.cfactory.construct_random(deref(ptr.get()))
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Factory_7create_network(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Factory_7create_network(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_network (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_7Factory_6create_network(((struct __pyx_obj_10organismal_11pubsub2_ext_Factory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Factory_6create_network(struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_self) {
  pubsub2::cNetwork_ptr __pyx_v_ptr;
  struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_n = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_network", 0);

  /* "organismal/pubsub2_ext.pyx":142
 * 
 *     def create_network(self):
 *         cdef cNetwork_ptr ptr = cNetwork_ptr(new cNetwork(self.cfactory_ptr))             # <<<<<<<<<<<<<<
 *         self.cfactory.construct_random(deref(ptr.get()))
 *         n = Network(self)
 */
  __pyx_v_ptr = pubsub2::cNetwork_ptr(new pubsub2::cNetwork(__pyx_v_self->cfactory_ptr));

  /* "organismal/pubsub2_ext.pyx":143
 *     def create_network(self):
 *         cdef cNetwork_ptr ptr = cNetwork_ptr(new cNetwork(self.cfactory_ptr))
 *         self.cfactory.construct_random(deref(ptr.get()))             # <<<<<<<<<<<<<<
 *         n = Network(self)
 *         n.bind_to(ptr)
 */
  __pyx_v_self->cfactory->construct_random((*__pyx_v_ptr.get()));

  /* "organismal/pubsub2_ext.pyx":144
 *         cdef cNetwork_ptr ptr = cNetwork_ptr(new cNetwork(self.cfactory_ptr))
 *         self.cfactory.construct_random(deref(ptr.get()))
 *         n = Network(self)             # <<<<<<<<<<<<<<
 *         n.bind_to(ptr)
 *         return n
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_10organismal_11pubsub2_ext_Network)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_n = ((struct __pyx_obj_10organismal_11pubsub2_ext_Network *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "organismal/pubsub2_ext.pyx":145
 *         self.cfactory.construct_random(deref(ptr.get()))
 *         n = Network(self)
 *         n.bind_to(ptr)             # <<<<<<<<<<<<<<
 *         return n
 * 
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_10organismal_11pubsub2_ext_Network *)__pyx_v_n->__pyx_vtab)->bind_to(__pyx_v_n, __pyx_v_ptr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "organismal/pubsub2_ext.pyx":146
 *         n = Network(self)
 *         n.bind_to(ptr)
 *         return n             # <<<<<<<<<<<<<<
 * 
 *     def create_collection(self, size_t size):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_n));
  __pyx_r = ((PyObject *)__pyx_v_n);
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":141
 *         return c
 * 
 *     def create_network(self):             # <<<<<<<<<<<<<<
 *         cdef cNetwork_ptr ptr = cNetwork_ptr(new cNetwork(self.cfactory_ptr))
 *         self.cfactory.construct_random(deref(ptr.get()))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("organismal.pubsub2_ext.Factory.create_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":148
 *         return n
 * 
 *     def create_collection(self, size_t size):             # <<<<<<<<<<<<<<
 *         cdef:
 *             cNetwork_ptr ptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Factory_9create_collection(PyObject *__pyx_v_self, PyObject *__pyx_arg_size); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Factory_9create_collection(PyObject *__pyx_v_self, PyObject *__pyx_arg_size) {
  size_t __pyx_v_size;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_collection (wrapper)", 0);
  assert(__pyx_arg_size); {
    __pyx_v_size = __Pyx_PyInt_As_size_t(__pyx_arg_size); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.Factory.create_collection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_7Factory_8create_collection(((struct __pyx_obj_10organismal_11pubsub2_ext_Factory *)__pyx_v_self), ((size_t)__pyx_v_size));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Factory_8create_collection(struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_self, size_t __pyx_v_size) {
  pubsub2::cNetwork_ptr __pyx_v_ptr;
  CYTHON_UNUSED size_t __pyx_v_i;
  struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *__pyx_v_nc = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_collection", 0);

  /* "organismal/pubsub2_ext.pyx":153
 *             size_t i
 * 
 *         nc = NetworkCollection(self)             # <<<<<<<<<<<<<<
 *         for i in range(size):
 *             ptr = cNetwork_ptr(new cNetwork(self.cfactory_ptr))
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_10organismal_11pubsub2_ext_NetworkCollection)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nc = ((struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "organismal/pubsub2_ext.pyx":154
 * 
 *         nc = NetworkCollection(self)
 *         for i in range(size):             # <<<<<<<<<<<<<<
 *             ptr = cNetwork_ptr(new cNetwork(self.cfactory_ptr))
 *             self.cfactory.construct_random(deref(ptr.get()))
 */
  __pyx_t_3 = __pyx_v_size;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "organismal/pubsub2_ext.pyx":155
 *         nc = NetworkCollection(self)
 *         for i in range(size):
 *             ptr = cNetwork_ptr(new cNetwork(self.cfactory_ptr))             # <<<<<<<<<<<<<<
 *             self.cfactory.construct_random(deref(ptr.get()))
 *             nc.cnetworks.push_back(ptr)
 */
    __pyx_v_ptr = pubsub2::cNetwork_ptr(new pubsub2::cNetwork(__pyx_v_self->cfactory_ptr));

    /* "organismal/pubsub2_ext.pyx":156
 *         for i in range(size):
 *             ptr = cNetwork_ptr(new cNetwork(self.cfactory_ptr))
 *             self.cfactory.construct_random(deref(ptr.get()))             # <<<<<<<<<<<<<<
 *             nc.cnetworks.push_back(ptr)
 * 
 */
    __pyx_v_self->cfactory->construct_random((*__pyx_v_ptr.get()));

    /* "organismal/pubsub2_ext.pyx":157
 *             ptr = cNetwork_ptr(new cNetwork(self.cfactory_ptr))
 *             self.cfactory.construct_random(deref(ptr.get()))
 *             nc.cnetworks.push_back(ptr)             # <<<<<<<<<<<<<<
 * 
 *         return nc
 */
    __pyx_v_nc->cnetworks.push_back(__pyx_v_ptr);
  }

  /* "organismal/pubsub2_ext.pyx":159
 *             nc.cnetworks.push_back(ptr)
 * 
 *         return nc             # <<<<<<<<<<<<<<
 * 
 *     def mutate_network(self, Network n):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_nc));
  __pyx_r = ((PyObject *)__pyx_v_nc);
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":148
 *         return n
 * 
 *     def create_collection(self, size_t size):             # <<<<<<<<<<<<<<
 *         cdef:
 *             cNetwork_ptr ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("organismal.pubsub2_ext.Factory.create_collection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_nc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":161
 *         return nc
 * 
 *     def mutate_network(self, Network n):             # <<<<<<<<<<<<<<
 *         self.cmutator.mutate_network(n.ptr, 2)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Factory_11mutate_network(PyObject *__pyx_v_self, PyObject *__pyx_v_n); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Factory_11mutate_network(PyObject *__pyx_v_self, PyObject *__pyx_v_n) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mutate_network (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_n), __pyx_ptype_10organismal_11pubsub2_ext_Network, 1, "n", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_7Factory_10mutate_network(((struct __pyx_obj_10organismal_11pubsub2_ext_Factory *)__pyx_v_self), ((struct __pyx_obj_10organismal_11pubsub2_ext_Network *)__pyx_v_n));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Factory_10mutate_network(struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mutate_network", 0);

  /* "organismal/pubsub2_ext.pyx":162
 * 
 *     def mutate_network(self, Network n):
 *         self.cmutator.mutate_network(n.ptr, 2)             # <<<<<<<<<<<<<<
 * 
 *     property environments:
 */
  __pyx_v_self->cmutator->mutate_network(__pyx_v_n->ptr, 2);

  /* "organismal/pubsub2_ext.pyx":161
 *         return nc
 * 
 *     def mutate_network(self, Network n):             # <<<<<<<<<<<<<<
 *         self.cmutator.mutate_network(n.ptr, 2)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":165
 * 
 *     property environments:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._environments is not None:
 *                 return self._environments
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Factory_12environments_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Factory_12environments_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_7Factory_12environments___get__(((struct __pyx_obj_10organismal_11pubsub2_ext_Factory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Factory_12environments___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_self) {
  std::vector<pubsub2::cChannelState> ::iterator __pyx_v_i;
  PyObject *__pyx_v_envs = NULL;
  struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "organismal/pubsub2_ext.pyx":166
 *     property environments:
 *         def __get__(self):
 *             if self._environments is not None:             # <<<<<<<<<<<<<<
 *                 return self._environments
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_environments != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "organismal/pubsub2_ext.pyx":167
 *         def __get__(self):
 *             if self._environments is not None:
 *                 return self._environments             # <<<<<<<<<<<<<<
 * 
 *             cdef vector[cChannelState].iterator i =  self.cfactory.environments.begin()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->_environments);
    __pyx_r = __pyx_v_self->_environments;
    goto __pyx_L0;
  }

  /* "organismal/pubsub2_ext.pyx":169
 *                 return self._environments
 * 
 *             cdef vector[cChannelState].iterator i =  self.cfactory.environments.begin()             # <<<<<<<<<<<<<<
 *             envs = []
 *             while i != self.cfactory.environments.end():
 */
  __pyx_v_i = __pyx_v_self->cfactory->environments.begin();

  /* "organismal/pubsub2_ext.pyx":170
 * 
 *             cdef vector[cChannelState].iterator i =  self.cfactory.environments.begin()
 *             envs = []             # <<<<<<<<<<<<<<
 *             while i != self.cfactory.environments.end():
 *                 p = ChannelStateFrozen()
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_envs = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "organismal/pubsub2_ext.pyx":171
 *             cdef vector[cChannelState].iterator i =  self.cfactory.environments.begin()
 *             envs = []
 *             while i != self.cfactory.environments.end():             # <<<<<<<<<<<<<<
 *                 p = ChannelStateFrozen()
 *                 p.init(self.cfactory_ptr, deref(i))
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_i != __pyx_v_self->cfactory->environments.end()) != 0);
    if (!__pyx_t_2) break;

    /* "organismal/pubsub2_ext.pyx":172
 *             envs = []
 *             while i != self.cfactory.environments.end():
 *                 p = ChannelStateFrozen()             # <<<<<<<<<<<<<<
 *                 p.init(self.cfactory_ptr, deref(i))
 *                 envs.append(p)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_10organismal_11pubsub2_ext_ChannelStateFrozen)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "organismal/pubsub2_ext.pyx":173
 *             while i != self.cfactory.environments.end():
 *                 p = ChannelStateFrozen()
 *                 p.init(self.cfactory_ptr, deref(i))             # <<<<<<<<<<<<<<
 *                 envs.append(p)
 *                 preinc(i)
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_10organismal_11pubsub2_ext_ChannelStateFrozen *)__pyx_v_p->__pyx_vtab)->init(__pyx_v_p, __pyx_v_self->cfactory_ptr, (*__pyx_v_i)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "organismal/pubsub2_ext.pyx":174
 *                 p = ChannelStateFrozen()
 *                 p.init(self.cfactory_ptr, deref(i))
 *                 envs.append(p)             # <<<<<<<<<<<<<<
 *                 preinc(i)
 * 
 */
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_envs, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "organismal/pubsub2_ext.pyx":175
 *                 p.init(self.cfactory_ptr, deref(i))
 *                 envs.append(p)
 *                 preinc(i)             # <<<<<<<<<<<<<<
 * 
 *             self._environments = envs
 */
    (++__pyx_v_i);
  }

  /* "organismal/pubsub2_ext.pyx":177
 *                 preinc(i)
 * 
 *             self._environments = envs             # <<<<<<<<<<<<<<
 *             return envs
 * 
 */
  __Pyx_INCREF(__pyx_v_envs);
  __Pyx_GIVEREF(__pyx_v_envs);
  __Pyx_GOTREF(__pyx_v_self->_environments);
  __Pyx_DECREF(__pyx_v_self->_environments);
  __pyx_v_self->_environments = __pyx_v_envs;

  /* "organismal/pubsub2_ext.pyx":178
 * 
 *             self._environments = envs
 *             return envs             # <<<<<<<<<<<<<<
 * 
 * cdef class Network:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_envs);
  __pyx_r = __pyx_v_envs;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":165
 * 
 *     property environments:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._environments is not None:
 *                 return self._environments
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("organismal.pubsub2_ext.Factory.environments.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_envs);
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":107
 *         cGeneMutator *cmutator
 *         readonly:
 *             object params             # <<<<<<<<<<<<<<
 * 
 *         object _environments
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Factory_6params_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Factory_6params_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_7Factory_6params___get__(((struct __pyx_obj_10organismal_11pubsub2_ext_Factory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Factory_6params___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->params);
  __pyx_r = __pyx_v_self->params;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":195
 *     # Networks take two stages. You need to create the python object and then
 *     # bind it to a cNetwork_ptr.
 *     def __cinit__(self, Factory factory):             # <<<<<<<<<<<<<<
 *         self.factory = factory
 *         self.ready = False
 */

/* Python wrapper */
static int __pyx_pw_10organismal_11pubsub2_ext_7Network_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10organismal_11pubsub2_ext_7Network_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_factory = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_factory,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_factory)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_factory = ((struct __pyx_obj_10organismal_11pubsub2_ext_Factory *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.Network.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_factory), __pyx_ptype_10organismal_11pubsub2_ext_Factory, 1, "factory", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_7Network___cinit__(((struct __pyx_obj_10organismal_11pubsub2_ext_Network *)__pyx_v_self), __pyx_v_factory);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10organismal_11pubsub2_ext_7Network___cinit__(struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_factory) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "organismal/pubsub2_ext.pyx":196
 *     # bind it to a cNetwork_ptr.
 *     def __cinit__(self, Factory factory):
 *         self.factory = factory             # <<<<<<<<<<<<<<
 *         self.ready = False
 *         self._genes = None
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_factory));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_factory));
  __Pyx_GOTREF(__pyx_v_self->factory);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->factory));
  __pyx_v_self->factory = __pyx_v_factory;

  /* "organismal/pubsub2_ext.pyx":197
 *     def __cinit__(self, Factory factory):
 *         self.factory = factory
 *         self.ready = False             # <<<<<<<<<<<<<<
 *         self._genes = None
 * 
 */
  __pyx_v_self->ready = 0;

  /* "organismal/pubsub2_ext.pyx":198
 *         self.factory = factory
 *         self.ready = False
 *         self._genes = None             # <<<<<<<<<<<<<<
 * 
 *     cdef bind_to(self, cNetwork_ptr &ptr):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_genes);
  __Pyx_DECREF(__pyx_v_self->_genes);
  __pyx_v_self->_genes = Py_None;

  /* "organismal/pubsub2_ext.pyx":195
 *     # Networks take two stages. You need to create the python object and then
 *     # bind it to a cNetwork_ptr.
 *     def __cinit__(self, Factory factory):             # <<<<<<<<<<<<<<
 *         self.factory = factory
 *         self.ready = False
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":200
 *         self._genes = None
 * 
 *     cdef bind_to(self, cNetwork_ptr &ptr):             # <<<<<<<<<<<<<<
 *         self.ptr = ptr
 *         self.cnetwork = self.ptr.get()
 */

static PyObject *__pyx_f_10organismal_11pubsub2_ext_7Network_bind_to(struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_self, pubsub2::cNetwork_ptr &__pyx_v_ptr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bind_to", 0);

  /* "organismal/pubsub2_ext.pyx":201
 * 
 *     cdef bind_to(self, cNetwork_ptr &ptr):
 *         self.ptr = ptr             # <<<<<<<<<<<<<<
 *         self.cnetwork = self.ptr.get()
 *         self.cnetwork.pyobject = <void *>(self)
 */
  __pyx_v_self->ptr = __pyx_v_ptr;

  /* "organismal/pubsub2_ext.pyx":202
 *     cdef bind_to(self, cNetwork_ptr &ptr):
 *         self.ptr = ptr
 *         self.cnetwork = self.ptr.get()             # <<<<<<<<<<<<<<
 *         self.cnetwork.pyobject = <void *>(self)
 *         self.ready = True
 */
  __pyx_v_self->cnetwork = __pyx_v_self->ptr.get();

  /* "organismal/pubsub2_ext.pyx":203
 *         self.ptr = ptr
 *         self.cnetwork = self.ptr.get()
 *         self.cnetwork.pyobject = <void *>(self)             # <<<<<<<<<<<<<<
 *         self.ready = True
 * 
 */
  __pyx_v_self->cnetwork->pyobject = ((void *)__pyx_v_self);

  /* "organismal/pubsub2_ext.pyx":204
 *         self.cnetwork = self.ptr.get()
 *         self.cnetwork.pyobject = <void *>(self)
 *         self.ready = True             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->ready = 1;

  /* "organismal/pubsub2_ext.pyx":200
 *         self._genes = None
 * 
 *     cdef bind_to(self, cNetwork_ptr &ptr):             # <<<<<<<<<<<<<<
 *         self.ptr = ptr
 *         self.cnetwork = self.ptr.get()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":206
 *         self.ready = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.cnetwork.pyobject = <void *>0
 * 
 */

/* Python wrapper */
static void __pyx_pw_10organismal_11pubsub2_ext_7Network_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_10organismal_11pubsub2_ext_7Network_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_10organismal_11pubsub2_ext_7Network_2__dealloc__(((struct __pyx_obj_10organismal_11pubsub2_ext_Network *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_10organismal_11pubsub2_ext_7Network_2__dealloc__(struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "organismal/pubsub2_ext.pyx":207
 * 
 *     def __dealloc__(self):
 *         self.cnetwork.pyobject = <void *>0             # <<<<<<<<<<<<<<
 * 
 *     property identifier:
 */
  __pyx_v_self->cnetwork->pyobject = ((void *)0);

  /* "organismal/pubsub2_ext.pyx":206
 *         self.ready = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.cnetwork.pyobject = <void *>0
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "organismal/pubsub2_ext.pyx":210
 * 
 *     property identifier:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.cnetwork.identifier
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Network_10identifier_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Network_10identifier_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_7Network_10identifier___get__(((struct __pyx_obj_10organismal_11pubsub2_ext_Network *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Network_10identifier___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "organismal/pubsub2_ext.pyx":211
 *     property identifier:
 *         def __get__(self):
 *             return self.cnetwork.identifier             # <<<<<<<<<<<<<<
 * 
 *     property gene_count:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_pubsub2_3a__3a_sequence_t(__pyx_v_self->cnetwork->identifier); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":210
 * 
 *     property identifier:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.cnetwork.identifier
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("organismal.pubsub2_ext.Network.identifier.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":214
 * 
 *     property gene_count:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.cnetwork.genes.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Network_10gene_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Network_10gene_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_7Network_10gene_count___get__(((struct __pyx_obj_10organismal_11pubsub2_ext_Network *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Network_10gene_count___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "organismal/pubsub2_ext.pyx":215
 *     property gene_count:
 *         def __get__(self):
 *             return self.cnetwork.genes.size()             # <<<<<<<<<<<<<<
 * 
 *     property genes:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->cnetwork->genes.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":214
 * 
 *     property gene_count:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.cnetwork.genes.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("organismal.pubsub2_ext.Network.gene_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":218
 * 
 *     property genes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._genes is None:
 *                 self._genes = tuple(Gene(self, i) for i in range(self.gene_count))
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Network_5genes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Network_5genes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_7Network_5genes___get__(((struct __pyx_obj_10organismal_11pubsub2_ext_Network *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10organismal_11pubsub2_ext_7Network_5genes_7__get___2generator1(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "organismal/pubsub2_ext.pyx":220
 *         def __get__(self):
 *             if self._genes is None:
 *                 self._genes = tuple(Gene(self, i) for i in range(self.gene_count))             # <<<<<<<<<<<<<<
 *             return self._genes
 * 
 */

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Network_5genes_7__get___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr *)__pyx_tp_new_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr(__pyx_ptype_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct____get__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_10organismal_11pubsub2_ext_7Network_5genes_7__get___2generator1, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_Network___get___locals_genexpr); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.Network.genes.__get__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10organismal_11pubsub2_ext_7Network_5genes_7__get___2generator1(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self), __pyx_n_s_gene_count); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self));
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_cur_scope->__pyx_v_i);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_i);
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_10organismal_11pubsub2_ext_Gene)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "organismal/pubsub2_ext.pyx":218
 * 
 *     property genes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._genes is None:
 *                 self._genes = tuple(Gene(self, i) for i in range(self.gene_count))
 */

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Network_5genes___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_self) {
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct____get__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __pyx_cur_scope = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct____get__ *)__pyx_tp_new_10organismal_11pubsub2_ext___pyx_scope_struct____get__(__pyx_ptype_10organismal_11pubsub2_ext___pyx_scope_struct____get__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "organismal/pubsub2_ext.pyx":219
 *     property genes:
 *         def __get__(self):
 *             if self._genes is None:             # <<<<<<<<<<<<<<
 *                 self._genes = tuple(Gene(self, i) for i in range(self.gene_count))
 *             return self._genes
 */
  __pyx_t_1 = (__pyx_cur_scope->__pyx_v_self->_genes == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "organismal/pubsub2_ext.pyx":220
 *         def __get__(self):
 *             if self._genes is None:
 *                 self._genes = tuple(Gene(self, i) for i in range(self.gene_count))             # <<<<<<<<<<<<<<
 *             return self._genes
 * 
 */
    __pyx_t_3 = __pyx_pf_10organismal_11pubsub2_ext_7Network_5genes_7__get___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_self->_genes);
    __Pyx_DECREF(__pyx_cur_scope->__pyx_v_self->_genes);
    __pyx_cur_scope->__pyx_v_self->_genes = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "organismal/pubsub2_ext.pyx":221
 *             if self._genes is None:
 *                 self._genes = tuple(Gene(self, i) for i in range(self.gene_count))
 *             return self._genes             # <<<<<<<<<<<<<<
 * 
 *     def cycle(self, ChannelState c):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self->_genes);
  __pyx_r = __pyx_cur_scope->__pyx_v_self->_genes;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":218
 * 
 *     property genes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._genes is None:
 *                 self._genes = tuple(Gene(self, i) for i in range(self.gene_count))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("organismal.pubsub2_ext.Network.genes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":223
 *             return self._genes
 * 
 *     def cycle(self, ChannelState c):             # <<<<<<<<<<<<<<
 *         self.cnetwork.cycle(c.cchannel_state)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Network_5cycle(PyObject *__pyx_v_self, PyObject *__pyx_v_c); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Network_5cycle(PyObject *__pyx_v_self, PyObject *__pyx_v_c) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cycle (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), __pyx_ptype_10organismal_11pubsub2_ext_ChannelState, 1, "c", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_7Network_4cycle(((struct __pyx_obj_10organismal_11pubsub2_ext_Network *)__pyx_v_self), ((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *)__pyx_v_c));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Network_4cycle(struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cycle", 0);

  /* "organismal/pubsub2_ext.pyx":224
 * 
 *     def cycle(self, ChannelState c):
 *         self.cnetwork.cycle(c.cchannel_state)             # <<<<<<<<<<<<<<
 * 
 *     property attractors:
 */
  __pyx_v_self->cnetwork->cycle(__pyx_v_c->__pyx_base.cchannel_state);

  /* "organismal/pubsub2_ext.pyx":223
 *             return self._genes
 * 
 *     def cycle(self, ChannelState c):             # <<<<<<<<<<<<<<
 *         self.cnetwork.cycle(c.cchannel_state)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":228
 *     property attractors:
 *         """A tuple containing the attractors for each environment"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._attractors is not None:
 *                 return self._attractors
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Network_10attractors_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Network_10attractors_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_7Network_10attractors___get__(((struct __pyx_obj_10organismal_11pubsub2_ext_Network *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Network_10attractors___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_self) {
  std::vector<pubsub2::cChannelStateVector> ::iterator __pyx_v_cattr_iter;
  std::vector<pubsub2::cChannelState> ::iterator __pyx_v_cstate_iter;
  PyObject *__pyx_v_attrs = NULL;
  PyObject *__pyx_v_attr = NULL;
  struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "organismal/pubsub2_ext.pyx":229
 *         """A tuple containing the attractors for each environment"""
 *         def __get__(self):
 *             if self._attractors is not None:             # <<<<<<<<<<<<<<
 *                 return self._attractors
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_attractors != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "organismal/pubsub2_ext.pyx":230
 *         def __get__(self):
 *             if self._attractors is not None:
 *                 return self._attractors             # <<<<<<<<<<<<<<
 * 
 *             cdef:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->_attractors);
    __pyx_r = __pyx_v_self->_attractors;
    goto __pyx_L0;
  }

  /* "organismal/pubsub2_ext.pyx":236
 *                 vector[cChannelState].iterator cstate_iter
 * 
 *             attrs = []             # <<<<<<<<<<<<<<
 *             cattr_iter = self.cnetwork.attractors.begin()
 *             while cattr_iter != self.cnetwork.attractors.end():
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_attrs = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "organismal/pubsub2_ext.pyx":237
 * 
 *             attrs = []
 *             cattr_iter = self.cnetwork.attractors.begin()             # <<<<<<<<<<<<<<
 *             while cattr_iter != self.cnetwork.attractors.end():
 *                 attr = []
 */
  __pyx_v_cattr_iter = __pyx_v_self->cnetwork->attractors.begin();

  /* "organismal/pubsub2_ext.pyx":238
 *             attrs = []
 *             cattr_iter = self.cnetwork.attractors.begin()
 *             while cattr_iter != self.cnetwork.attractors.end():             # <<<<<<<<<<<<<<
 *                 attr = []
 *                 cstate_iter = deref(cattr_iter).begin()
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_cattr_iter != __pyx_v_self->cnetwork->attractors.end()) != 0);
    if (!__pyx_t_2) break;

    /* "organismal/pubsub2_ext.pyx":239
 *             cattr_iter = self.cnetwork.attractors.begin()
 *             while cattr_iter != self.cnetwork.attractors.end():
 *                 attr = []             # <<<<<<<<<<<<<<
 *                 cstate_iter = deref(cattr_iter).begin()
 *                 while cstate_iter != deref(cattr_iter).end():
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_attr, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "organismal/pubsub2_ext.pyx":240
 *             while cattr_iter != self.cnetwork.attractors.end():
 *                 attr = []
 *                 cstate_iter = deref(cattr_iter).begin()             # <<<<<<<<<<<<<<
 *                 while cstate_iter != deref(cattr_iter).end():
 *                     c = ChannelStateFrozen()
 */
    __pyx_v_cstate_iter = (*__pyx_v_cattr_iter).begin();

    /* "organismal/pubsub2_ext.pyx":241
 *                 attr = []
 *                 cstate_iter = deref(cattr_iter).begin()
 *                 while cstate_iter != deref(cattr_iter).end():             # <<<<<<<<<<<<<<
 *                     c = ChannelStateFrozen()
 *                     c.init(self.factory.cfactory_ptr, deref(cstate_iter))
 */
    while (1) {
      __pyx_t_2 = ((__pyx_v_cstate_iter != (*__pyx_v_cattr_iter).end()) != 0);
      if (!__pyx_t_2) break;

      /* "organismal/pubsub2_ext.pyx":242
 *                 cstate_iter = deref(cattr_iter).begin()
 *                 while cstate_iter != deref(cattr_iter).end():
 *                     c = ChannelStateFrozen()             # <<<<<<<<<<<<<<
 *                     c.init(self.factory.cfactory_ptr, deref(cstate_iter))
 *                     attr.append(c)
 */
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_10organismal_11pubsub2_ext_ChannelStateFrozen)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_c, ((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "organismal/pubsub2_ext.pyx":243
 *                 while cstate_iter != deref(cattr_iter).end():
 *                     c = ChannelStateFrozen()
 *                     c.init(self.factory.cfactory_ptr, deref(cstate_iter))             # <<<<<<<<<<<<<<
 *                     attr.append(c)
 *                     preinc(cstate_iter)
 */
      __pyx_t_3 = ((struct __pyx_vtabstruct_10organismal_11pubsub2_ext_ChannelStateFrozen *)__pyx_v_c->__pyx_vtab)->init(__pyx_v_c, __pyx_v_self->factory->cfactory_ptr, (*__pyx_v_cstate_iter)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "organismal/pubsub2_ext.pyx":244
 *                     c = ChannelStateFrozen()
 *                     c.init(self.factory.cfactory_ptr, deref(cstate_iter))
 *                     attr.append(c)             # <<<<<<<<<<<<<<
 *                     preinc(cstate_iter)
 * 
 */
      __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_attr, ((PyObject *)__pyx_v_c)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "organismal/pubsub2_ext.pyx":245
 *                     c.init(self.factory.cfactory_ptr, deref(cstate_iter))
 *                     attr.append(c)
 *                     preinc(cstate_iter)             # <<<<<<<<<<<<<<
 * 
 *                 # Make everything a tuple -- you shouldn't be able to mess
 */
      (++__pyx_v_cstate_iter);
    }

    /* "organismal/pubsub2_ext.pyx":249
 *                 # Make everything a tuple -- you shouldn't be able to mess
 *                 # with it!
 *                 attrs.append(tuple(attr))             # <<<<<<<<<<<<<<
 *                 preinc(cattr_iter)
 * 
 */
    __pyx_t_3 = PyList_AsTuple(__pyx_v_attr); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_attrs, __pyx_t_3); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "organismal/pubsub2_ext.pyx":250
 *                 # with it!
 *                 attrs.append(tuple(attr))
 *                 preinc(cattr_iter)             # <<<<<<<<<<<<<<
 * 
 *             # Again: tuples, so you can't mess with it.
 */
    (++__pyx_v_cattr_iter);
  }

  /* "organismal/pubsub2_ext.pyx":253
 * 
 *             # Again: tuples, so you can't mess with it.
 *             self._attractors = tuple(attrs)             # <<<<<<<<<<<<<<
 *             return self._attractors
 * 
 */
  __pyx_t_3 = PyList_AsTuple(__pyx_v_attrs); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_attractors);
  __Pyx_DECREF(__pyx_v_self->_attractors);
  __pyx_v_self->_attractors = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "organismal/pubsub2_ext.pyx":254
 *             # Again: tuples, so you can't mess with it.
 *             self._attractors = tuple(attrs)
 *             return self._attractors             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_attractors);
  __pyx_r = __pyx_v_self->_attractors;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":228
 *     property attractors:
 *         """A tuple containing the attractors for each environment"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._attractors is not None:
 *                 return self._attractors
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("organismal.pubsub2_ext.Network.attractors.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_attrs);
  __Pyx_XDECREF(__pyx_v_attr);
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":183
 *     cdef:
 *         readonly:
 *             Factory factory             # <<<<<<<<<<<<<<
 *             bint ready
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Network_7factory_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Network_7factory_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_7Network_7factory___get__(((struct __pyx_obj_10organismal_11pubsub2_ext_Network *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Network_7factory___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->factory));
  __pyx_r = ((PyObject *)__pyx_v_self->factory);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":184
 *         readonly:
 *             Factory factory
 *             bint ready             # <<<<<<<<<<<<<<
 * 
 *         # Because we hold a reference to the shared_ptr, we know we can always
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Network_5ready_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_7Network_5ready_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_7Network_5ready___get__(((struct __pyx_obj_10organismal_11pubsub2_ext_Network *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_7Network_5ready___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->ready); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("organismal.pubsub2_ext.Network.ready.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":272
 *             size_t gene_number
 * 
 *     def __cinit__(self, Network n, size_t g):             # <<<<<<<<<<<<<<
 *         self.network = n
 *         self.gene_number = g
 */

/* Python wrapper */
static int __pyx_pw_10organismal_11pubsub2_ext_4Gene_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10organismal_11pubsub2_ext_4Gene_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_n = 0;
  size_t __pyx_v_g;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,&__pyx_n_s_g,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_n = ((struct __pyx_obj_10organismal_11pubsub2_ext_Network *)values[0]);
    __pyx_v_g = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_g == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.Gene.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_n), __pyx_ptype_10organismal_11pubsub2_ext_Network, 1, "n", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_4Gene___cinit__(((struct __pyx_obj_10organismal_11pubsub2_ext_Gene *)__pyx_v_self), __pyx_v_n, __pyx_v_g);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10organismal_11pubsub2_ext_4Gene___cinit__(struct __pyx_obj_10organismal_11pubsub2_ext_Gene *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_n, size_t __pyx_v_g) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "organismal/pubsub2_ext.pyx":273
 * 
 *     def __cinit__(self, Network n, size_t g):
 *         self.network = n             # <<<<<<<<<<<<<<
 *         self.gene_number = g
 *         self.cgene = &self.network.cnetwork.genes[g]
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_n));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_n));
  __Pyx_GOTREF(__pyx_v_self->network);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->network));
  __pyx_v_self->network = __pyx_v_n;

  /* "organismal/pubsub2_ext.pyx":274
 *     def __cinit__(self, Network n, size_t g):
 *         self.network = n
 *         self.gene_number = g             # <<<<<<<<<<<<<<
 *         self.cgene = &self.network.cnetwork.genes[g]
 * 
 */
  __pyx_v_self->gene_number = __pyx_v_g;

  /* "organismal/pubsub2_ext.pyx":275
 *         self.network = n
 *         self.gene_number = g
 *         self.cgene = &self.network.cnetwork.genes[g]             # <<<<<<<<<<<<<<
 * 
 *     property sequence:
 */
  __pyx_v_self->cgene = (&(__pyx_v_self->network->cnetwork->genes[__pyx_v_g]));

  /* "organismal/pubsub2_ext.pyx":272
 *             size_t gene_number
 * 
 *     def __cinit__(self, Network n, size_t g):             # <<<<<<<<<<<<<<
 *         self.network = n
 *         self.gene_number = g
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":278
 * 
 *     property sequence:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.cgene.sequence
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_4Gene_8sequence_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_4Gene_8sequence_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_4Gene_8sequence___get__(((struct __pyx_obj_10organismal_11pubsub2_ext_Gene *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_4Gene_8sequence___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Gene *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "organismal/pubsub2_ext.pyx":279
 *     property sequence:
 *         def __get__(self):
 *             return self.cgene.sequence             # <<<<<<<<<<<<<<
 * 
 *     property pub:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_pubsub2_3a__3a_sequence_t(__pyx_v_self->cgene->sequence); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":278
 * 
 *     property sequence:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.cgene.sequence
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("organismal.pubsub2_ext.Gene.sequence.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":282
 * 
 *     property pub:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.cgene.pub
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_4Gene_3pub_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_4Gene_3pub_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_4Gene_3pub___get__(((struct __pyx_obj_10organismal_11pubsub2_ext_Gene *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_4Gene_3pub___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Gene *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "organismal/pubsub2_ext.pyx":283
 *     property pub:
 *         def __get__(self):
 *             return self.cgene.pub             # <<<<<<<<<<<<<<
 * 
 *     property module_count:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_pubsub2_3a__3a_signal_t(__pyx_v_self->cgene->pub); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":282
 * 
 *     property pub:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.cgene.pub
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("organismal.pubsub2_ext.Gene.pub.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":286
 * 
 *     property module_count:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.cgene.modules.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_4Gene_12module_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_4Gene_12module_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_4Gene_12module_count___get__(((struct __pyx_obj_10organismal_11pubsub2_ext_Gene *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_4Gene_12module_count___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Gene *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "organismal/pubsub2_ext.pyx":287
 *     property module_count:
 *         def __get__(self):
 *             return self.cgene.modules.size()             # <<<<<<<<<<<<<<
 * 
 *     property modules:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->cgene->modules.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":286
 * 
 *     property module_count:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.cgene.modules.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("organismal.pubsub2_ext.Gene.module_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":290
 * 
 *     property modules:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             # Lazy construction
 *             if self._modules is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_4Gene_7modules_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_4Gene_7modules_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_4Gene_7modules___get__(((struct __pyx_obj_10organismal_11pubsub2_ext_Gene *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10organismal_11pubsub2_ext_4Gene_7modules_7__get___2generator2(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "organismal/pubsub2_ext.pyx":293
 *             # Lazy construction
 *             if self._modules is None:
 *                 self._modules = tuple(CisModule(self, i) for i in range(self.module_count))             # <<<<<<<<<<<<<<
 *             return self._modules
 * 
 */

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_4Gene_7modules_7__get___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr *)__pyx_tp_new_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr(__pyx_ptype_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_10organismal_11pubsub2_ext_4Gene_7modules_7__get___2generator2, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_Gene___get___locals_genexpr); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.Gene.modules.__get__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10organismal_11pubsub2_ext_4Gene_7modules_7__get___2generator2(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self), __pyx_n_s_module_count); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self));
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_cur_scope->__pyx_v_i);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_i);
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_10organismal_11pubsub2_ext_CisModule)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "organismal/pubsub2_ext.pyx":290
 * 
 *     property modules:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             # Lazy construction
 *             if self._modules is None:
 */

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_4Gene_7modules___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Gene *__pyx_v_self) {
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __pyx_cur_scope = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__ *)__pyx_tp_new_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__(__pyx_ptype_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "organismal/pubsub2_ext.pyx":292
 *         def __get__(self):
 *             # Lazy construction
 *             if self._modules is None:             # <<<<<<<<<<<<<<
 *                 self._modules = tuple(CisModule(self, i) for i in range(self.module_count))
 *             return self._modules
 */
  __pyx_t_1 = (__pyx_cur_scope->__pyx_v_self->_modules == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "organismal/pubsub2_ext.pyx":293
 *             # Lazy construction
 *             if self._modules is None:
 *                 self._modules = tuple(CisModule(self, i) for i in range(self.module_count))             # <<<<<<<<<<<<<<
 *             return self._modules
 * 
 */
    __pyx_t_3 = __pyx_pf_10organismal_11pubsub2_ext_4Gene_7modules_7__get___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_self->_modules);
    __Pyx_DECREF(__pyx_cur_scope->__pyx_v_self->_modules);
    __pyx_cur_scope->__pyx_v_self->_modules = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "organismal/pubsub2_ext.pyx":294
 *             if self._modules is None:
 *                 self._modules = tuple(CisModule(self, i) for i in range(self.module_count))
 *             return self._modules             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self->_modules);
  __pyx_r = __pyx_cur_scope->__pyx_v_self->_modules;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":290
 * 
 *     property modules:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             # Lazy construction
 *             if self._modules is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("organismal.pubsub2_ext.Gene.modules.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":296
 *             return self._modules
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         p = self.network.factory.params
 *         return "<Gene[{}]: {}>".format(self.sequence, p.name_for_channel(self.pub))
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_4Gene_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_4Gene_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_4Gene_2__repr__(((struct __pyx_obj_10organismal_11pubsub2_ext_Gene *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_4Gene_2__repr__(struct __pyx_obj_10organismal_11pubsub2_ext_Gene *__pyx_v_self) {
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "organismal/pubsub2_ext.pyx":297
 * 
 *     def __repr__(self):
 *         p = self.network.factory.params             # <<<<<<<<<<<<<<
 *         return "<Gene[{}]: {}>".format(self.sequence, p.name_for_channel(self.pub))
 * 
 */
  __pyx_t_1 = __pyx_v_self->network->factory->params;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_p = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "organismal/pubsub2_ext.pyx":298
 *     def __repr__(self):
 *         p = self.network.factory.params
 *         return "<Gene[{}]: {}>".format(self.sequence, p.name_for_channel(self.pub))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Gene, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_sequence); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_p, __pyx_n_s_name_for_channel); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_pub); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __Pyx_GIVEREF(__pyx_t_7); __pyx_t_7 = NULL;
    PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_9 = 1;
    }
  }
  __pyx_t_8 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (__pyx_t_5) {
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
  }
  PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_9, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_9, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":296
 *             return self._modules
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         p = self.network.factory.params
 *         return "<Gene[{}]: {}>".format(self.sequence, p.name_for_channel(self.pub))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("organismal.pubsub2_ext.Gene.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":269
 *             # By holding this ref, we ensure the pointer is always valid (pace
 *             # what I said above. DON'T mess with the genes!)
 *             Network network             # <<<<<<<<<<<<<<
 *             size_t gene_number
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_4Gene_7network_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_4Gene_7network_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_4Gene_7network___get__(((struct __pyx_obj_10organismal_11pubsub2_ext_Gene *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_4Gene_7network___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Gene *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->network));
  __pyx_r = ((PyObject *)__pyx_v_self->network);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":270
 *             # what I said above. DON'T mess with the genes!)
 *             Network network
 *             size_t gene_number             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Network n, size_t g):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_4Gene_11gene_number_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_4Gene_11gene_number_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_4Gene_11gene_number___get__(((struct __pyx_obj_10organismal_11pubsub2_ext_Gene *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_4Gene_11gene_number___get__(struct __pyx_obj_10organismal_11pubsub2_ext_Gene *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->gene_number); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("organismal.pubsub2_ext.Gene.gene_number.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":310
 *             Gene gene
 * 
 *     def __cinit__(self, Gene g, size_t i):             # <<<<<<<<<<<<<<
 *         self.gene = g
 *         assert i < g.cgene.modules.size()
 */

/* Python wrapper */
static int __pyx_pw_10organismal_11pubsub2_ext_9CisModule_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10organismal_11pubsub2_ext_9CisModule_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10organismal_11pubsub2_ext_Gene *__pyx_v_g = 0;
  size_t __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_g,&__pyx_n_s_i,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_g = ((struct __pyx_obj_10organismal_11pubsub2_ext_Gene *)values[0]);
    __pyx_v_i = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_i == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.CisModule.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_g), __pyx_ptype_10organismal_11pubsub2_ext_Gene, 1, "g", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_9CisModule___cinit__(((struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *)__pyx_v_self), __pyx_v_g, __pyx_v_i);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10organismal_11pubsub2_ext_9CisModule___cinit__(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_Gene *__pyx_v_g, size_t __pyx_v_i) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "organismal/pubsub2_ext.pyx":311
 * 
 *     def __cinit__(self, Gene g, size_t i):
 *         self.gene = g             # <<<<<<<<<<<<<<
 *         assert i < g.cgene.modules.size()
 *         self.ccismodule = &g.cgene.modules[i]
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_g));
  __Pyx_GOTREF(__pyx_v_self->gene);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->gene));
  __pyx_v_self->gene = __pyx_v_g;

  /* "organismal/pubsub2_ext.pyx":312
 *     def __cinit__(self, Gene g, size_t i):
 *         self.gene = g
 *         assert i < g.cgene.modules.size()             # <<<<<<<<<<<<<<
 *         self.ccismodule = &g.cgene.modules[i]
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_i < __pyx_v_g->cgene->modules.size()) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "organismal/pubsub2_ext.pyx":313
 *         self.gene = g
 *         assert i < g.cgene.modules.size()
 *         self.ccismodule = &g.cgene.modules[i]             # <<<<<<<<<<<<<<
 * 
 *     property sub1:
 */
  __pyx_v_self->ccismodule = (&(__pyx_v_g->cgene->modules[__pyx_v_i]));

  /* "organismal/pubsub2_ext.pyx":310
 *             Gene gene
 * 
 *     def __cinit__(self, Gene g, size_t i):             # <<<<<<<<<<<<<<
 *         self.gene = g
 *         assert i < g.cgene.modules.size()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.CisModule.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":316
 * 
 *     property sub1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ccismodule.sub1
 *         def __set__(self, signal_t val):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_9CisModule_4sub1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_9CisModule_4sub1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_9CisModule_4sub1___get__(((struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_9CisModule_4sub1___get__(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "organismal/pubsub2_ext.pyx":317
 *     property sub1:
 *         def __get__(self):
 *             return self.ccismodule.sub1             # <<<<<<<<<<<<<<
 *         def __set__(self, signal_t val):
 *             self.ccismodule.sub1 = val
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_pubsub2_3a__3a_signal_t(__pyx_v_self->ccismodule->sub1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":316
 * 
 *     property sub1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ccismodule.sub1
 *         def __set__(self, signal_t val):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("organismal.pubsub2_ext.CisModule.sub1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":318
 *         def __get__(self):
 *             return self.ccismodule.sub1
 *         def __set__(self, signal_t val):             # <<<<<<<<<<<<<<
 *             self.ccismodule.sub1 = val
 * 
 */

/* Python wrapper */
static int __pyx_pw_10organismal_11pubsub2_ext_9CisModule_4sub1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_val); /*proto*/
static int __pyx_pw_10organismal_11pubsub2_ext_9CisModule_4sub1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_val) {
  pubsub2::signal_t __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_val); {
    __pyx_v_val = __Pyx_PyInt_As_pubsub2_3a__3a_signal_t(__pyx_arg_val); if (unlikely((__pyx_v_val == (pubsub2::signal_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.CisModule.sub1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_9CisModule_4sub1_2__set__(((struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *)__pyx_v_self), ((pubsub2::signal_t)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10organismal_11pubsub2_ext_9CisModule_4sub1_2__set__(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self, pubsub2::signal_t __pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "organismal/pubsub2_ext.pyx":319
 *             return self.ccismodule.sub1
 *         def __set__(self, signal_t val):
 *             self.ccismodule.sub1 = val             # <<<<<<<<<<<<<<
 * 
 *     property sub2:
 */
  __pyx_v_self->ccismodule->sub1 = __pyx_v_val;

  /* "organismal/pubsub2_ext.pyx":318
 *         def __get__(self):
 *             return self.ccismodule.sub1
 *         def __set__(self, signal_t val):             # <<<<<<<<<<<<<<
 *             self.ccismodule.sub1 = val
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":322
 * 
 *     property sub2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ccismodule.sub2
 *         def __set__(self, signal_t val):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_9CisModule_4sub2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_9CisModule_4sub2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_9CisModule_4sub2___get__(((struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_9CisModule_4sub2___get__(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "organismal/pubsub2_ext.pyx":323
 *     property sub2:
 *         def __get__(self):
 *             return self.ccismodule.sub2             # <<<<<<<<<<<<<<
 *         def __set__(self, signal_t val):
 *             self.ccismodule.sub2 = val
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_pubsub2_3a__3a_signal_t(__pyx_v_self->ccismodule->sub2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":322
 * 
 *     property sub2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ccismodule.sub2
 *         def __set__(self, signal_t val):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("organismal.pubsub2_ext.CisModule.sub2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":324
 *         def __get__(self):
 *             return self.ccismodule.sub2
 *         def __set__(self, signal_t val):             # <<<<<<<<<<<<<<
 *             self.ccismodule.sub2 = val
 * 
 */

/* Python wrapper */
static int __pyx_pw_10organismal_11pubsub2_ext_9CisModule_4sub2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_val); /*proto*/
static int __pyx_pw_10organismal_11pubsub2_ext_9CisModule_4sub2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_val) {
  pubsub2::signal_t __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_val); {
    __pyx_v_val = __Pyx_PyInt_As_pubsub2_3a__3a_signal_t(__pyx_arg_val); if (unlikely((__pyx_v_val == (pubsub2::signal_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.CisModule.sub2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_9CisModule_4sub2_2__set__(((struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *)__pyx_v_self), ((pubsub2::signal_t)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10organismal_11pubsub2_ext_9CisModule_4sub2_2__set__(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self, pubsub2::signal_t __pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "organismal/pubsub2_ext.pyx":325
 *             return self.ccismodule.sub2
 *         def __set__(self, signal_t val):
 *             self.ccismodule.sub2 = val             # <<<<<<<<<<<<<<
 * 
 *     property op:
 */
  __pyx_v_self->ccismodule->sub2 = __pyx_v_val;

  /* "organismal/pubsub2_ext.pyx":324
 *         def __get__(self):
 *             return self.ccismodule.sub2
 *         def __set__(self, signal_t val):             # <<<<<<<<<<<<<<
 *             self.ccismodule.sub2 = val
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":328
 * 
 *     property op:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ccismodule.op
 *         def __set__(self, operand_t val):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_9CisModule_2op_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_9CisModule_2op_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_9CisModule_2op___get__(((struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_9CisModule_2op___get__(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "organismal/pubsub2_ext.pyx":329
 *     property op:
 *         def __get__(self):
 *             return self.ccismodule.op             # <<<<<<<<<<<<<<
 *         def __set__(self, operand_t val):
 *             self.ccismodule.op = val
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_pubsub2_3a__3a_signal_t(__pyx_v_self->ccismodule->op); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":328
 * 
 *     property op:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ccismodule.op
 *         def __set__(self, operand_t val):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("organismal.pubsub2_ext.CisModule.op.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":330
 *         def __get__(self):
 *             return self.ccismodule.op
 *         def __set__(self, operand_t val):             # <<<<<<<<<<<<<<
 *             self.ccismodule.op = val
 * 
 */

/* Python wrapper */
static int __pyx_pw_10organismal_11pubsub2_ext_9CisModule_2op_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_val); /*proto*/
static int __pyx_pw_10organismal_11pubsub2_ext_9CisModule_2op_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_val) {
  pubsub2::operand_t __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_val); {
    __pyx_v_val = __Pyx_PyInt_As_pubsub2_3a__3a_operand_t(__pyx_arg_val); if (unlikely((__pyx_v_val == (pubsub2::operand_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.CisModule.op.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_9CisModule_2op_2__set__(((struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *)__pyx_v_self), ((pubsub2::operand_t)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10organismal_11pubsub2_ext_9CisModule_2op_2__set__(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self, pubsub2::operand_t __pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "organismal/pubsub2_ext.pyx":331
 *             return self.ccismodule.op
 *         def __set__(self, operand_t val):
 *             self.ccismodule.op = val             # <<<<<<<<<<<<<<
 * 
 *     def __cmp__(self, CisModule other):
 */
  __pyx_v_self->ccismodule->op = __pyx_v_val;

  /* "organismal/pubsub2_ext.pyx":330
 *         def __get__(self):
 *             return self.ccismodule.op
 *         def __set__(self, operand_t val):             # <<<<<<<<<<<<<<
 *             self.ccismodule.op = val
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":333
 *             self.ccismodule.op = val
 * 
 *     def __cmp__(self, CisModule other):             # <<<<<<<<<<<<<<
 *         if self.ccismodule.op == other.ccismodule.op:
 *             if self.ccismodule.sub1 == other.ccismodule.sub1:
 */

/* Python wrapper */
#if PY_MAJOR_VERSION < 3
static int __pyx_pw_10organismal_11pubsub2_ext_9CisModule_3__cmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static int __pyx_pw_10organismal_11pubsub2_ext_9CisModule_3__cmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cmp__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_10organismal_11pubsub2_ext_CisModule, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_9CisModule_2__cmp__(((struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *)__pyx_v_self), ((struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_MAJOR_VERSION < 3)*/

#if PY_MAJOR_VERSION < 3
static int __pyx_pf_10organismal_11pubsub2_ext_9CisModule_2__cmp__(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_other) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__cmp__", 0);

  /* "organismal/pubsub2_ext.pyx":334
 * 
 *     def __cmp__(self, CisModule other):
 *         if self.ccismodule.op == other.ccismodule.op:             # <<<<<<<<<<<<<<
 *             if self.ccismodule.sub1 == other.ccismodule.sub1:
 *                 if self.ccismodule.sub2 == other.ccismodule.sub2:
 */
  __pyx_t_1 = ((__pyx_v_self->ccismodule->op == __pyx_v_other->ccismodule->op) != 0);
  if (__pyx_t_1) {

    /* "organismal/pubsub2_ext.pyx":335
 *     def __cmp__(self, CisModule other):
 *         if self.ccismodule.op == other.ccismodule.op:
 *             if self.ccismodule.sub1 == other.ccismodule.sub1:             # <<<<<<<<<<<<<<
 *                 if self.ccismodule.sub2 == other.ccismodule.sub2:
 *                     return 0
 */
    __pyx_t_1 = ((__pyx_v_self->ccismodule->sub1 == __pyx_v_other->ccismodule->sub1) != 0);
    if (__pyx_t_1) {

      /* "organismal/pubsub2_ext.pyx":336
 *         if self.ccismodule.op == other.ccismodule.op:
 *             if self.ccismodule.sub1 == other.ccismodule.sub1:
 *                 if self.ccismodule.sub2 == other.ccismodule.sub2:             # <<<<<<<<<<<<<<
 *                     return 0
 *                 else:
 */
      __pyx_t_1 = ((__pyx_v_self->ccismodule->sub2 == __pyx_v_other->ccismodule->sub2) != 0);
      if (__pyx_t_1) {

        /* "organismal/pubsub2_ext.pyx":337
 *             if self.ccismodule.sub1 == other.ccismodule.sub1:
 *                 if self.ccismodule.sub2 == other.ccismodule.sub2:
 *                     return 0             # <<<<<<<<<<<<<<
 *                 else:
 *                     return self.ccismodule.sub1 - other.ccismodule.sub1
 */
        __pyx_r = 0;
        goto __pyx_L0;
      }
      /*else*/ {

        /* "organismal/pubsub2_ext.pyx":339
 *                     return 0
 *                 else:
 *                     return self.ccismodule.sub1 - other.ccismodule.sub1             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.ccismodule.sub2 - other.ccismodule.sub2
 */
        __pyx_r = (__pyx_v_self->ccismodule->sub1 - __pyx_v_other->ccismodule->sub1);
        goto __pyx_L0;
      }
    }
    /*else*/ {

      /* "organismal/pubsub2_ext.pyx":341
 *                     return self.ccismodule.sub1 - other.ccismodule.sub1
 *             else:
 *                 return self.ccismodule.sub2 - other.ccismodule.sub2             # <<<<<<<<<<<<<<
 *         else:
 *             return self.ccismodule.op - other.ccismodule.op
 */
      __pyx_r = (__pyx_v_self->ccismodule->sub2 - __pyx_v_other->ccismodule->sub2);
      goto __pyx_L0;
    }
  }
  /*else*/ {

    /* "organismal/pubsub2_ext.pyx":343
 *                 return self.ccismodule.sub2 - other.ccismodule.sub2
 *         else:
 *             return self.ccismodule.op - other.ccismodule.op             # <<<<<<<<<<<<<<
 * 
 *     def test(self, unsigned int a, unsigned int b):
 */
    __pyx_r = (__pyx_v_self->ccismodule->op - __pyx_v_other->ccismodule->op);
    goto __pyx_L0;
  }

  /* "organismal/pubsub2_ext.pyx":333
 *             self.ccismodule.op = val
 * 
 *     def __cmp__(self, CisModule other):             # <<<<<<<<<<<<<<
 *         if self.ccismodule.op == other.ccismodule.op:
 *             if self.ccismodule.sub1 == other.ccismodule.sub1:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_MAJOR_VERSION < 3)*/

/* "organismal/pubsub2_ext.pyx":345
 *             return self.ccismodule.op - other.ccismodule.op
 * 
 *     def test(self, unsigned int a, unsigned int b):             # <<<<<<<<<<<<<<
 *         return self.ccismodule.test(a, b)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_9CisModule_5test(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_9CisModule_5test(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_a;
  unsigned int __pyx_v_b;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("test (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "test") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = __Pyx_PyInt_As_unsigned_int(values[0]); if (unlikely((__pyx_v_a == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_b == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("test", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.CisModule.test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_9CisModule_4test(((struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *)__pyx_v_self), __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_9CisModule_4test(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self, unsigned int __pyx_v_a, unsigned int __pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("test", 0);

  /* "organismal/pubsub2_ext.pyx":346
 * 
 *     def test(self, unsigned int a, unsigned int b):
 *         return self.ccismodule.test(a, b)             # <<<<<<<<<<<<<<
 * 
 *     def active(self, ChannelState p):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->ccismodule->test(__pyx_v_a, __pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":345
 *             return self.ccismodule.op - other.ccismodule.op
 * 
 *     def test(self, unsigned int a, unsigned int b):             # <<<<<<<<<<<<<<
 *         return self.ccismodule.test(a, b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("organismal.pubsub2_ext.CisModule.test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":348
 *         return self.ccismodule.test(a, b)
 * 
 *     def active(self, ChannelState p):             # <<<<<<<<<<<<<<
 *         return self.ccismodule.active(p.cchannel_state)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_9CisModule_7active(PyObject *__pyx_v_self, PyObject *__pyx_v_p); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_9CisModule_7active(PyObject *__pyx_v_self, PyObject *__pyx_v_p) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("active (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_10organismal_11pubsub2_ext_ChannelState, 1, "p", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_9CisModule_6active(((struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *)__pyx_v_self), ((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *)__pyx_v_p));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_9CisModule_6active(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("active", 0);

  /* "organismal/pubsub2_ext.pyx":349
 * 
 *     def active(self, ChannelState p):
 *         return self.ccismodule.active(p.cchannel_state)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->ccismodule->active(__pyx_v_p->__pyx_base.cchannel_state)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":348
 *         return self.ccismodule.test(a, b)
 * 
 *     def active(self, ChannelState p):             # <<<<<<<<<<<<<<
 *         return self.ccismodule.active(p.cchannel_state)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("organismal.pubsub2_ext.CisModule.active", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":351
 *         return self.ccismodule.active(p.cchannel_state)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         p = self.gene.network.factory.params
 *         return "<CisModule: {}, {}, {}>".format(
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_9CisModule_9__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_9CisModule_9__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_9CisModule_8__repr__(((struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_9CisModule_8__repr__(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self) {
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "organismal/pubsub2_ext.pyx":352
 * 
 *     def __repr__(self):
 *         p = self.gene.network.factory.params             # <<<<<<<<<<<<<<
 *         return "<CisModule: {}, {}, {}>".format(
 *             Operand(self.op).name,
 */
  __pyx_t_1 = __pyx_v_self->gene->network->factory->params;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_p = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "organismal/pubsub2_ext.pyx":353
 *     def __repr__(self):
 *         p = self.gene.network.factory.params
 *         return "<CisModule: {}, {}, {}>".format(             # <<<<<<<<<<<<<<
 *             Operand(self.op).name,
 *             p.name_for_channel(self.sub1),
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_CisModule, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "organismal/pubsub2_ext.pyx":354
 *         p = self.gene.network.factory.params
 *         return "<CisModule: {}, {}, {}>".format(
 *             Operand(self.op).name,             # <<<<<<<<<<<<<<
 *             p.name_for_channel(self.sub1),
 *             p.name_for_channel(self.sub2),
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_Operand); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_op); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
    PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "organismal/pubsub2_ext.pyx":355
 *         return "<CisModule: {}, {}, {}>".format(
 *             Operand(self.op).name,
 *             p.name_for_channel(self.sub1),             # <<<<<<<<<<<<<<
 *             p.name_for_channel(self.sub2),
 *         )
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_p, __pyx_n_s_name_for_channel); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_sub1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
    PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "organismal/pubsub2_ext.pyx":356
 *             Operand(self.op).name,
 *             p.name_for_channel(self.sub1),
 *             p.name_for_channel(self.sub2),             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_p, __pyx_n_s_name_for_channel); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_sub2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
    PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_10 = 1;
    }
  }
  __pyx_t_9 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (__pyx_t_8) {
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __Pyx_GIVEREF(__pyx_t_8); __pyx_t_8 = NULL;
  }
  PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_10, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_10, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_10, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_7 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":351
 *         return self.ccismodule.active(p.cchannel_state)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         p = self.gene.network.factory.params
 *         return "<CisModule: {}, {}, {}>".format(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("organismal.pubsub2_ext.CisModule.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":308
 * 
 *         readonly:
 *             Gene gene             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Gene g, size_t i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_9CisModule_4gene_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_9CisModule_4gene_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_9CisModule_4gene___get__(((struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_9CisModule_4gene___get__(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->gene));
  __pyx_r = ((PyObject *)__pyx_v_self->gene);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":366
 *         cNetworkVector cnetworks
 * 
 *     def __cinit__(self, Factory factory):             # <<<<<<<<<<<<<<
 *         self.factory = factory
 * 
 */

/* Python wrapper */
static int __pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_factory = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_factory,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_factory)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_factory = ((struct __pyx_obj_10organismal_11pubsub2_ext_Factory *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.NetworkCollection.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_factory), __pyx_ptype_10organismal_11pubsub2_ext_Factory, 1, "factory", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection___cinit__(((struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *)__pyx_v_self), __pyx_v_factory);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection___cinit__(struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_Factory *__pyx_v_factory) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "organismal/pubsub2_ext.pyx":367
 * 
 *     def __cinit__(self, Factory factory):
 *         self.factory = factory             # <<<<<<<<<<<<<<
 * 
 *     def add(self, Network n):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_factory));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_factory));
  __Pyx_GOTREF(__pyx_v_self->factory);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->factory));
  __pyx_v_self->factory = __pyx_v_factory;

  /* "organismal/pubsub2_ext.pyx":366
 *         cNetworkVector cnetworks
 * 
 *     def __cinit__(self, Factory factory):             # <<<<<<<<<<<<<<
 *         self.factory = factory
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":369
 *         self.factory = factory
 * 
 *     def add(self, Network n):             # <<<<<<<<<<<<<<
 *         assert n.factory is self.factory
 *         self.cnetworks.push_back(n.ptr)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_3add(PyObject *__pyx_v_self, PyObject *__pyx_v_n); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_3add(PyObject *__pyx_v_self, PyObject *__pyx_v_n) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_n), __pyx_ptype_10organismal_11pubsub2_ext_Network, 1, "n", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection_2add(((struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *)__pyx_v_self), ((struct __pyx_obj_10organismal_11pubsub2_ext_Network *)__pyx_v_n));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection_2add(struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *__pyx_v_self, struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 0);

  /* "organismal/pubsub2_ext.pyx":370
 * 
 *     def add(self, Network n):
 *         assert n.factory is self.factory             # <<<<<<<<<<<<<<
 *         self.cnetworks.push_back(n.ptr)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (__pyx_v_n->factory == __pyx_v_self->factory);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "organismal/pubsub2_ext.pyx":371
 *     def add(self, Network n):
 *         assert n.factory is self.factory
 *         self.cnetworks.push_back(n.ptr)             # <<<<<<<<<<<<<<
 * 
 *     cdef object get_at(self, size_t i):
 */
  __pyx_v_self->cnetworks.push_back(__pyx_v_n->ptr);

  /* "organismal/pubsub2_ext.pyx":369
 *         self.factory = factory
 * 
 *     def add(self, Network n):             # <<<<<<<<<<<<<<
 *         assert n.factory is self.factory
 *         self.cnetworks.push_back(n.ptr)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.NetworkCollection.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":373
 *         self.cnetworks.push_back(n.ptr)
 * 
 *     cdef object get_at(self, size_t i):             # <<<<<<<<<<<<<<
 *         if i >= self.cnetworks.size():
 *             raise IndexError
 */

static PyObject *__pyx_f_10organismal_11pubsub2_ext_17NetworkCollection_get_at(struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *__pyx_v_self, size_t __pyx_v_i) {
  pubsub2::cNetwork_ptr __pyx_v_ptr;
  pubsub2::cNetwork *__pyx_v_net;
  struct __pyx_obj_10organismal_11pubsub2_ext_Network *__pyx_v_n = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_at", 0);

  /* "organismal/pubsub2_ext.pyx":374
 * 
 *     cdef object get_at(self, size_t i):
 *         if i >= self.cnetworks.size():             # <<<<<<<<<<<<<<
 *             raise IndexError
 * 
 */
  __pyx_t_1 = ((__pyx_v_i >= __pyx_v_self->cnetworks.size()) != 0);
  if (__pyx_t_1) {

    /* "organismal/pubsub2_ext.pyx":375
 *     cdef object get_at(self, size_t i):
 *         if i >= self.cnetworks.size():
 *             raise IndexError             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
    __Pyx_Raise(__pyx_builtin_IndexError, 0, 0, 0);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "organismal/pubsub2_ext.pyx":378
 * 
 *         cdef:
 *             cNetwork_ptr ptr = self.cnetworks[i]             # <<<<<<<<<<<<<<
 *             cNetwork *net = ptr.get()
 * 
 */
  __pyx_v_ptr = (__pyx_v_self->cnetworks[__pyx_v_i]);

  /* "organismal/pubsub2_ext.pyx":379
 *         cdef:
 *             cNetwork_ptr ptr = self.cnetworks[i]
 *             cNetwork *net = ptr.get()             # <<<<<<<<<<<<<<
 * 
 *         # Is there an existing python object?
 */
  __pyx_v_net = __pyx_v_ptr.get();

  /* "organismal/pubsub2_ext.pyx":384
 *         # Note: cython automatically increments the reference count when we do
 *         # this (which is what we want)
 *         if net.pyobject:             # <<<<<<<<<<<<<<
 *             return <object>(net.pyobject)
 * 
 */
  __pyx_t_1 = (__pyx_v_net->pyobject != 0);
  if (__pyx_t_1) {

    /* "organismal/pubsub2_ext.pyx":385
 *         # this (which is what we want)
 *         if net.pyobject:
 *             return <object>(net.pyobject)             # <<<<<<<<<<<<<<
 * 
 *         # Ok, so we need to create a python wrapper object
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_net->pyobject));
    __pyx_r = ((PyObject *)__pyx_v_net->pyobject);
    goto __pyx_L0;
  }

  /* "organismal/pubsub2_ext.pyx":388
 * 
 *         # Ok, so we need to create a python wrapper object
 *         n = Network(self.factory)             # <<<<<<<<<<<<<<
 *         n.bind_to(ptr)
 *         return n
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->factory));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->factory));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->factory));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_10organismal_11pubsub2_ext_Network)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_n = ((struct __pyx_obj_10organismal_11pubsub2_ext_Network *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "organismal/pubsub2_ext.pyx":389
 *         # Ok, so we need to create a python wrapper object
 *         n = Network(self.factory)
 *         n.bind_to(ptr)             # <<<<<<<<<<<<<<
 *         return n
 * 
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_10organismal_11pubsub2_ext_Network *)__pyx_v_n->__pyx_vtab)->bind_to(__pyx_v_n, __pyx_v_ptr); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "organismal/pubsub2_ext.pyx":390
 *         n = Network(self.factory)
 *         n.bind_to(ptr)
 *         return n             # <<<<<<<<<<<<<<
 * 
 *     property size:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_n));
  __pyx_r = ((PyObject *)__pyx_v_n);
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":373
 *         self.cnetworks.push_back(n.ptr)
 * 
 *     cdef object get_at(self, size_t i):             # <<<<<<<<<<<<<<
 *         if i >= self.cnetworks.size():
 *             raise IndexError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("organismal.pubsub2_ext.NetworkCollection.get_at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":393
 * 
 *     property size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.cnetworks.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection_4size___get__(((struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection_4size___get__(struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "organismal/pubsub2_ext.pyx":394
 *     property size:
 *         def __get__(self):
 *             return self.cnetworks.size()             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, size_t i):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->cnetworks.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":393
 * 
 *     property size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.cnetworks.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("organismal.pubsub2_ext.NetworkCollection.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":396
 *             return self.cnetworks.size()
 * 
 *     def __getitem__(self, size_t i):             # <<<<<<<<<<<<<<
 *         return self.get_at(i)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  size_t __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_size_t(__pyx_arg_i); if (unlikely((__pyx_v_i == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.NetworkCollection.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection_4__getitem__(((struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *)__pyx_v_self), ((size_t)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection_4__getitem__(struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *__pyx_v_self, size_t __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "organismal/pubsub2_ext.pyx":397
 * 
 *     def __getitem__(self, size_t i):
 *         return self.get_at(i)             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10organismal_11pubsub2_ext_NetworkCollection *)__pyx_v_self->__pyx_vtab)->get_at(__pyx_v_self, __pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":396
 *             return self.cnetworks.size()
 * 
 *     def __getitem__(self, size_t i):             # <<<<<<<<<<<<<<
 *         return self.get_at(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("organismal.pubsub2_ext.NetworkCollection.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10organismal_11pubsub2_ext_17NetworkCollection_8generator(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "organismal/pubsub2_ext.pyx":399
 *         return self.get_at(i)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         for i in range(self.size):
 *             yield self.get_at(i)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_7__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_7__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection_6__iter__(((struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection_6__iter__(struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *__pyx_v_self) {
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__ *)__pyx_tp_new_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__(__pyx_ptype_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_10organismal_11pubsub2_ext_17NetworkCollection_8generator, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_NetworkCollection___iter); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("organismal.pubsub2_ext.NetworkCollection.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10organismal_11pubsub2_ext_17NetworkCollection_8generator(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__ *__pyx_cur_scope = ((struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "organismal/pubsub2_ext.pyx":400
 * 
 *     def __iter__(self):
 *         for i in range(self.size):             # <<<<<<<<<<<<<<
 *             yield self.get_at(i)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "organismal/pubsub2_ext.pyx":401
 *     def __iter__(self):
 *         for i in range(self.size):
 *             yield self.get_at(i)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_cur_scope->__pyx_v_i); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = ((struct __pyx_vtabstruct_10organismal_11pubsub2_ext_NetworkCollection *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->get_at(__pyx_cur_scope->__pyx_v_self, __pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "organismal/pubsub2_ext.pyx":400
 * 
 *     def __iter__(self):
 *         for i in range(self.size):             # <<<<<<<<<<<<<<
 *             yield self.get_at(i)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "organismal/pubsub2_ext.pyx":399
 *         return self.get_at(i)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         for i in range(self.size):
 *             yield self.get_at(i)
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "organismal/pubsub2_ext.pyx":403
 *             yield self.get_at(i)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<NetworkCollection: {}>".format(self.size)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_10__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_10__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection_9__repr__(((struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection_9__repr__(struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "organismal/pubsub2_ext.pyx":404
 * 
 *     def __repr__(self):
 *         return "<NetworkCollection: {}>".format(self.size)             # <<<<<<<<<<<<<<
 * 
 *     def mutate(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_NetworkCollection, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "organismal/pubsub2_ext.pyx":403
 *             yield self.get_at(i)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<NetworkCollection: {}>".format(self.size)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("organismal.pubsub2_ext.NetworkCollection.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":406
 *         return "<NetworkCollection: {}>".format(self.size)
 * 
 *     def mutate(self):             # <<<<<<<<<<<<<<
 *         self.factory.cmutator.mutate_collection(self.cnetworks)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_12mutate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_12mutate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mutate (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection_11mutate(((struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection_11mutate(struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mutate", 0);

  /* "organismal/pubsub2_ext.pyx":407
 * 
 *     def mutate(self):
 *         self.factory.cmutator.mutate_collection(self.cnetworks)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->factory->cmutator->mutate_collection(__pyx_v_self->cnetworks);

  /* "organismal/pubsub2_ext.pyx":406
 *         return "<NetworkCollection: {}>".format(self.size)
 * 
 *     def mutate(self):             # <<<<<<<<<<<<<<
 *         self.factory.cmutator.mutate_collection(self.cnetworks)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "organismal/pubsub2_ext.pyx":363
 *     cdef:
 *         readonly:
 *             Factory factory             # <<<<<<<<<<<<<<
 *         cNetworkVector cnetworks
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_7factory_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_7factory_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection_7factory___get__(((struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10organismal_11pubsub2_ext_17NetworkCollection_7factory___get__(struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->factory));
  __pyx_r = ((PyObject *)__pyx_v_self->factory);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":30
 * 
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * 
 */

static PyObject *__pyx_convert_string_to_py_(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_to_py_", 0);

  /* "string.to_py":31
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":30
 * 
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_string_to_py_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_pubsub2_3a__3a_operand_t")
 * cdef vector[X] __pyx_convert_vector_from_py_pubsub2_3a__3a_operand_t(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<pubsub2::operand_t>  __pyx_convert_vector_from_py_pubsub2_3a__3a_operand_t(PyObject *__pyx_v_o) {
  std::vector<pubsub2::operand_t>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<pubsub2::operand_t>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  pubsub2::operand_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_pubsub2_3a__3a_operand_t", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_pubsub2_3a__3a_operand_t(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_pubsub2_3a__3a_operand_t(__pyx_v_item); if (unlikely(__pyx_t_5 == -1 && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_pubsub2_3a__3a_operand_t(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_pubsub2_3a__3a_operand_t")
 * cdef vector[X] __pyx_convert_vector_from_py_pubsub2_3a__3a_operand_t(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_pubsub2_3a__3a_operand_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.from_py":159
 * 
 * @cname("__pyx_convert_pair_from_py_size_t____size_t")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_size_t____size_t(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](X_from_py(x), Y_from_py(y))
 */

static std::pair<size_t,size_t>  __pyx_convert_pair_from_py_size_t____size_t(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  std::pair<size_t,size_t>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_from_py_size_t____size_t", 0);

  /* "pair.from_py":160
 * @cname("__pyx_convert_pair_from_py_size_t____size_t")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_size_t____size_t(object o) except *:
 *     x, y = o             # <<<<<<<<<<<<<<
 *     return pair[X,Y](X_from_py(x), Y_from_py(y))
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_o))) || (PyList_CheckExact(__pyx_v_o))) {
    PyObject* sequence = __pyx_v_o;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pair.from_py":161
 * cdef pair[X,Y] __pyx_convert_pair_from_py_size_t____size_t(object o) except *:
 *     x, y = o
 *     return pair[X,Y](X_from_py(x), Y_from_py(y))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_x); if (unlikely(__pyx_t_5 == -1 && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_y); if (unlikely(__pyx_t_6 == -1 && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = std::pair<size_t,size_t> (__pyx_t_5, __pyx_t_6);
  goto __pyx_L0;

  /* "pair.from_py":159
 * 
 * @cname("__pyx_convert_pair_from_py_size_t____size_t")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_size_t____size_t(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](X_from_py(x), Y_from_py(y))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.from_py.__pyx_convert_pair_from_py_size_t____size_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_10organismal_11pubsub2_ext_ChannelStateFrozen __pyx_vtable_10organismal_11pubsub2_ext_ChannelStateFrozen;

static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext_ChannelStateFrozen(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *)o);
  p->__pyx_vtab = __pyx_vtabptr_10organismal_11pubsub2_ext_ChannelStateFrozen;
  new((void*)&(p->cchannel_state)) pubsub2::cChannelState();
  new((void*)&(p->cfactory_ptr)) pubsub2::cFactory_ptr();
  if (unlikely(__pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10organismal_11pubsub2_ext_ChannelStateFrozen(PyObject *o) {
  struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *p = (struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(&p->cchannel_state);
  __Pyx_call_destructor(&p->cfactory_ptr);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_10organismal_11pubsub2_ext_ChannelStateFrozen(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_10organismal_11pubsub2_ext_18ChannelStateFrozen_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_10organismal_11pubsub2_ext_ChannelStateFrozen[] = {
  {"test", (PyCFunction)__pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_3test, METH_O, 0},
  {"__copy__", (PyCFunction)__pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_11__copy__, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_13copy, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10organismal_11pubsub2_ext_ChannelStateFrozen[] = {
  {(char *)"size", __pyx_getprop_10organismal_11pubsub2_ext_18ChannelStateFrozen_size, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_ChannelStateFrozen = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_10organismal_11pubsub2_ext_ChannelStateFrozen, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_ChannelStateFrozen = {
  0, /*mp_length*/
  __pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_10organismal_11pubsub2_ext_ChannelStateFrozen = {
  PyVarObject_HEAD_INIT(0, 0)
  "organismal.pubsub2_ext.ChannelStateFrozen", /*tp_name*/
  sizeof(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10organismal_11pubsub2_ext_ChannelStateFrozen, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  __pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_7__cmp__, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_15__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_ChannelStateFrozen, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_ChannelStateFrozen, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_9__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10organismal_11pubsub2_ext_ChannelStateFrozen, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10organismal_11pubsub2_ext_ChannelStateFrozen, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10organismal_11pubsub2_ext_ChannelStateFrozen, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_10organismal_11pubsub2_ext_ChannelState __pyx_vtable_10organismal_11pubsub2_ext_ChannelState;

static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext_ChannelState(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *p;
  PyObject *o = __pyx_tp_new_10organismal_11pubsub2_ext_ChannelStateFrozen(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10organismal_11pubsub2_ext_ChannelStateFrozen*)__pyx_vtabptr_10organismal_11pubsub2_ext_ChannelState;
  if (unlikely(__pyx_pw_10organismal_11pubsub2_ext_12ChannelState_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static int __pyx_mp_ass_subscript_10organismal_11pubsub2_ext_ChannelState(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_10organismal_11pubsub2_ext_12ChannelState_9__setitem__(o, i, v);
  }
  else {
    if (__pyx_ptype_10organismal_11pubsub2_ext_ChannelStateFrozen->tp_as_mapping && __pyx_ptype_10organismal_11pubsub2_ext_ChannelStateFrozen->tp_as_mapping->mp_ass_subscript)
      return __pyx_ptype_10organismal_11pubsub2_ext_ChannelStateFrozen->tp_as_mapping->mp_ass_subscript(o, i, v);
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyMethodDef __pyx_methods_10organismal_11pubsub2_ext_ChannelState[] = {
  {"set", (PyCFunction)__pyx_pw_10organismal_11pubsub2_ext_12ChannelState_3set, METH_O, 0},
  {"reset", (PyCFunction)__pyx_pw_10organismal_11pubsub2_ext_12ChannelState_5reset, METH_O, 0},
  {"flip", (PyCFunction)__pyx_pw_10organismal_11pubsub2_ext_12ChannelState_7flip, METH_O, 0},
  {"merge", (PyCFunction)__pyx_pw_10organismal_11pubsub2_ext_12ChannelState_11merge, METH_O, 0},
  {0, 0, 0, 0}
};

static PyMappingMethods __pyx_tp_as_mapping_ChannelState = {
  0, /*mp_length*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_5__getitem__, /*mp_subscript*/
  #else
  0, /*mp_subscript*/
  #endif
  __pyx_mp_ass_subscript_10organismal_11pubsub2_ext_ChannelState, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_10organismal_11pubsub2_ext_ChannelState = {
  PyVarObject_HEAD_INIT(0, 0)
  "organismal.pubsub2_ext.ChannelState", /*tp_name*/
  sizeof(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelState), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10organismal_11pubsub2_ext_ChannelStateFrozen, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_7__cmp__, /*tp_compare*/
  #else
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #endif
  __pyx_pw_10organismal_11pubsub2_ext_12ChannelState_13__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_ChannelState, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10organismal_11pubsub2_ext_18ChannelStateFrozen_9__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10organismal_11pubsub2_ext_ChannelState, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10organismal_11pubsub2_ext_ChannelState, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext_Factory(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10organismal_11pubsub2_ext_Factory *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10organismal_11pubsub2_ext_Factory *)o);
  new((void*)&(p->cfactory_ptr)) pubsub2::cFactory_ptr();
  p->params = Py_None; Py_INCREF(Py_None);
  p->_environments = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_10organismal_11pubsub2_ext_7Factory_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10organismal_11pubsub2_ext_Factory(PyObject *o) {
  struct __pyx_obj_10organismal_11pubsub2_ext_Factory *p = (struct __pyx_obj_10organismal_11pubsub2_ext_Factory *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_10organismal_11pubsub2_ext_7Factory_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(&p->cfactory_ptr);
  Py_CLEAR(p->params);
  Py_CLEAR(p->_environments);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_10organismal_11pubsub2_ext_Factory(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10organismal_11pubsub2_ext_Factory *p = (struct __pyx_obj_10organismal_11pubsub2_ext_Factory *)o;
  if (p->params) {
    e = (*v)(p->params, a); if (e) return e;
  }
  if (p->_environments) {
    e = (*v)(p->_environments, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10organismal_11pubsub2_ext_Factory(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10organismal_11pubsub2_ext_Factory *p = (struct __pyx_obj_10organismal_11pubsub2_ext_Factory *)o;
  tmp = ((PyObject*)p->params);
  p->params = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_environments);
  p->_environments = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_10organismal_11pubsub2_ext_7Factory_environments(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10organismal_11pubsub2_ext_7Factory_12environments_1__get__(o);
}

static PyObject *__pyx_getprop_10organismal_11pubsub2_ext_7Factory_params(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10organismal_11pubsub2_ext_7Factory_6params_1__get__(o);
}

static PyMethodDef __pyx_methods_10organismal_11pubsub2_ext_Factory[] = {
  {"create_state", (PyCFunction)__pyx_pw_10organismal_11pubsub2_ext_7Factory_5create_state, METH_NOARGS, 0},
  {"create_network", (PyCFunction)__pyx_pw_10organismal_11pubsub2_ext_7Factory_7create_network, METH_NOARGS, 0},
  {"create_collection", (PyCFunction)__pyx_pw_10organismal_11pubsub2_ext_7Factory_9create_collection, METH_O, 0},
  {"mutate_network", (PyCFunction)__pyx_pw_10organismal_11pubsub2_ext_7Factory_11mutate_network, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10organismal_11pubsub2_ext_Factory[] = {
  {(char *)"environments", __pyx_getprop_10organismal_11pubsub2_ext_7Factory_environments, 0, 0, 0},
  {(char *)"params", __pyx_getprop_10organismal_11pubsub2_ext_7Factory_params, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10organismal_11pubsub2_ext_Factory = {
  PyVarObject_HEAD_INIT(0, 0)
  "organismal.pubsub2_ext.Factory", /*tp_name*/
  sizeof(struct __pyx_obj_10organismal_11pubsub2_ext_Factory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10organismal_11pubsub2_ext_Factory, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10organismal_11pubsub2_ext_Factory, /*tp_traverse*/
  __pyx_tp_clear_10organismal_11pubsub2_ext_Factory, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10organismal_11pubsub2_ext_Factory, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10organismal_11pubsub2_ext_Factory, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10organismal_11pubsub2_ext_Factory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_10organismal_11pubsub2_ext_Network __pyx_vtable_10organismal_11pubsub2_ext_Network;

static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext_Network(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10organismal_11pubsub2_ext_Network *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10organismal_11pubsub2_ext_Network *)o);
  p->__pyx_vtab = __pyx_vtabptr_10organismal_11pubsub2_ext_Network;
  new((void*)&(p->ptr)) pubsub2::cNetwork_ptr();
  p->factory = ((struct __pyx_obj_10organismal_11pubsub2_ext_Factory *)Py_None); Py_INCREF(Py_None);
  p->_genes = Py_None; Py_INCREF(Py_None);
  p->_attractors = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_10organismal_11pubsub2_ext_7Network_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10organismal_11pubsub2_ext_Network(PyObject *o) {
  struct __pyx_obj_10organismal_11pubsub2_ext_Network *p = (struct __pyx_obj_10organismal_11pubsub2_ext_Network *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_10organismal_11pubsub2_ext_7Network_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(&p->ptr);
  Py_CLEAR(p->factory);
  Py_CLEAR(p->_genes);
  Py_CLEAR(p->_attractors);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_10organismal_11pubsub2_ext_Network(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10organismal_11pubsub2_ext_Network *p = (struct __pyx_obj_10organismal_11pubsub2_ext_Network *)o;
  if (p->factory) {
    e = (*v)(((PyObject*)p->factory), a); if (e) return e;
  }
  if (p->_genes) {
    e = (*v)(p->_genes, a); if (e) return e;
  }
  if (p->_attractors) {
    e = (*v)(p->_attractors, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10organismal_11pubsub2_ext_Network(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10organismal_11pubsub2_ext_Network *p = (struct __pyx_obj_10organismal_11pubsub2_ext_Network *)o;
  tmp = ((PyObject*)p->factory);
  p->factory = ((struct __pyx_obj_10organismal_11pubsub2_ext_Factory *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_genes);
  p->_genes = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_attractors);
  p->_attractors = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_10organismal_11pubsub2_ext_7Network_identifier(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10organismal_11pubsub2_ext_7Network_10identifier_1__get__(o);
}

static PyObject *__pyx_getprop_10organismal_11pubsub2_ext_7Network_gene_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10organismal_11pubsub2_ext_7Network_10gene_count_1__get__(o);
}

static PyObject *__pyx_getprop_10organismal_11pubsub2_ext_7Network_genes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10organismal_11pubsub2_ext_7Network_5genes_1__get__(o);
}

static PyObject *__pyx_getprop_10organismal_11pubsub2_ext_7Network_attractors(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10organismal_11pubsub2_ext_7Network_10attractors_1__get__(o);
}

static PyObject *__pyx_getprop_10organismal_11pubsub2_ext_7Network_factory(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10organismal_11pubsub2_ext_7Network_7factory_1__get__(o);
}

static PyObject *__pyx_getprop_10organismal_11pubsub2_ext_7Network_ready(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10organismal_11pubsub2_ext_7Network_5ready_1__get__(o);
}

static PyMethodDef __pyx_methods_10organismal_11pubsub2_ext_Network[] = {
  {"cycle", (PyCFunction)__pyx_pw_10organismal_11pubsub2_ext_7Network_5cycle, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10organismal_11pubsub2_ext_Network[] = {
  {(char *)"identifier", __pyx_getprop_10organismal_11pubsub2_ext_7Network_identifier, 0, 0, 0},
  {(char *)"gene_count", __pyx_getprop_10organismal_11pubsub2_ext_7Network_gene_count, 0, 0, 0},
  {(char *)"genes", __pyx_getprop_10organismal_11pubsub2_ext_7Network_genes, 0, 0, 0},
  {(char *)"attractors", __pyx_getprop_10organismal_11pubsub2_ext_7Network_attractors, 0, __pyx_k_A_tuple_containing_the_attractor, 0},
  {(char *)"factory", __pyx_getprop_10organismal_11pubsub2_ext_7Network_factory, 0, 0, 0},
  {(char *)"ready", __pyx_getprop_10organismal_11pubsub2_ext_7Network_ready, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10organismal_11pubsub2_ext_Network = {
  PyVarObject_HEAD_INIT(0, 0)
  "organismal.pubsub2_ext.Network", /*tp_name*/
  sizeof(struct __pyx_obj_10organismal_11pubsub2_ext_Network), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10organismal_11pubsub2_ext_Network, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10organismal_11pubsub2_ext_Network, /*tp_traverse*/
  __pyx_tp_clear_10organismal_11pubsub2_ext_Network, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10organismal_11pubsub2_ext_Network, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10organismal_11pubsub2_ext_Network, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10organismal_11pubsub2_ext_Network, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext_Gene(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10organismal_11pubsub2_ext_Gene *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10organismal_11pubsub2_ext_Gene *)o);
  p->_modules = Py_None; Py_INCREF(Py_None);
  p->network = ((struct __pyx_obj_10organismal_11pubsub2_ext_Network *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_10organismal_11pubsub2_ext_4Gene_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10organismal_11pubsub2_ext_Gene(PyObject *o) {
  struct __pyx_obj_10organismal_11pubsub2_ext_Gene *p = (struct __pyx_obj_10organismal_11pubsub2_ext_Gene *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_modules);
  Py_CLEAR(p->network);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_10organismal_11pubsub2_ext_Gene(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10organismal_11pubsub2_ext_Gene *p = (struct __pyx_obj_10organismal_11pubsub2_ext_Gene *)o;
  if (p->_modules) {
    e = (*v)(p->_modules, a); if (e) return e;
  }
  if (p->network) {
    e = (*v)(((PyObject*)p->network), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10organismal_11pubsub2_ext_Gene(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10organismal_11pubsub2_ext_Gene *p = (struct __pyx_obj_10organismal_11pubsub2_ext_Gene *)o;
  tmp = ((PyObject*)p->_modules);
  p->_modules = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->network);
  p->network = ((struct __pyx_obj_10organismal_11pubsub2_ext_Network *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_10organismal_11pubsub2_ext_4Gene_sequence(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10organismal_11pubsub2_ext_4Gene_8sequence_1__get__(o);
}

static PyObject *__pyx_getprop_10organismal_11pubsub2_ext_4Gene_pub(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10organismal_11pubsub2_ext_4Gene_3pub_1__get__(o);
}

static PyObject *__pyx_getprop_10organismal_11pubsub2_ext_4Gene_module_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10organismal_11pubsub2_ext_4Gene_12module_count_1__get__(o);
}

static PyObject *__pyx_getprop_10organismal_11pubsub2_ext_4Gene_modules(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10organismal_11pubsub2_ext_4Gene_7modules_1__get__(o);
}

static PyObject *__pyx_getprop_10organismal_11pubsub2_ext_4Gene_network(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10organismal_11pubsub2_ext_4Gene_7network_1__get__(o);
}

static PyObject *__pyx_getprop_10organismal_11pubsub2_ext_4Gene_gene_number(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10organismal_11pubsub2_ext_4Gene_11gene_number_1__get__(o);
}

static PyMethodDef __pyx_methods_10organismal_11pubsub2_ext_Gene[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10organismal_11pubsub2_ext_Gene[] = {
  {(char *)"sequence", __pyx_getprop_10organismal_11pubsub2_ext_4Gene_sequence, 0, 0, 0},
  {(char *)"pub", __pyx_getprop_10organismal_11pubsub2_ext_4Gene_pub, 0, 0, 0},
  {(char *)"module_count", __pyx_getprop_10organismal_11pubsub2_ext_4Gene_module_count, 0, 0, 0},
  {(char *)"modules", __pyx_getprop_10organismal_11pubsub2_ext_4Gene_modules, 0, 0, 0},
  {(char *)"network", __pyx_getprop_10organismal_11pubsub2_ext_4Gene_network, 0, 0, 0},
  {(char *)"gene_number", __pyx_getprop_10organismal_11pubsub2_ext_4Gene_gene_number, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10organismal_11pubsub2_ext_Gene = {
  PyVarObject_HEAD_INIT(0, 0)
  "organismal.pubsub2_ext.Gene", /*tp_name*/
  sizeof(struct __pyx_obj_10organismal_11pubsub2_ext_Gene), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10organismal_11pubsub2_ext_Gene, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_10organismal_11pubsub2_ext_4Gene_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "A proxy to a gene.\n    ", /*tp_doc*/
  __pyx_tp_traverse_10organismal_11pubsub2_ext_Gene, /*tp_traverse*/
  __pyx_tp_clear_10organismal_11pubsub2_ext_Gene, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10organismal_11pubsub2_ext_Gene, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10organismal_11pubsub2_ext_Gene, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10organismal_11pubsub2_ext_Gene, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext_CisModule(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *)o);
  p->gene = ((struct __pyx_obj_10organismal_11pubsub2_ext_Gene *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_10organismal_11pubsub2_ext_9CisModule_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10organismal_11pubsub2_ext_CisModule(PyObject *o) {
  struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *p = (struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->gene);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_10organismal_11pubsub2_ext_CisModule(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *p = (struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *)o;
  if (p->gene) {
    e = (*v)(((PyObject*)p->gene), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10organismal_11pubsub2_ext_CisModule(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *p = (struct __pyx_obj_10organismal_11pubsub2_ext_CisModule *)o;
  tmp = ((PyObject*)p->gene);
  p->gene = ((struct __pyx_obj_10organismal_11pubsub2_ext_Gene *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_10organismal_11pubsub2_ext_9CisModule_sub1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10organismal_11pubsub2_ext_9CisModule_4sub1_1__get__(o);
}

static int __pyx_setprop_10organismal_11pubsub2_ext_9CisModule_sub1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10organismal_11pubsub2_ext_9CisModule_4sub1_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10organismal_11pubsub2_ext_9CisModule_sub2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10organismal_11pubsub2_ext_9CisModule_4sub2_1__get__(o);
}

static int __pyx_setprop_10organismal_11pubsub2_ext_9CisModule_sub2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10organismal_11pubsub2_ext_9CisModule_4sub2_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10organismal_11pubsub2_ext_9CisModule_op(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10organismal_11pubsub2_ext_9CisModule_2op_1__get__(o);
}

static int __pyx_setprop_10organismal_11pubsub2_ext_9CisModule_op(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10organismal_11pubsub2_ext_9CisModule_2op_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10organismal_11pubsub2_ext_9CisModule_gene(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10organismal_11pubsub2_ext_9CisModule_4gene_1__get__(o);
}

static PyMethodDef __pyx_methods_10organismal_11pubsub2_ext_CisModule[] = {
  {"test", (PyCFunction)__pyx_pw_10organismal_11pubsub2_ext_9CisModule_5test, METH_VARARGS|METH_KEYWORDS, 0},
  {"active", (PyCFunction)__pyx_pw_10organismal_11pubsub2_ext_9CisModule_7active, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10organismal_11pubsub2_ext_CisModule[] = {
  {(char *)"sub1", __pyx_getprop_10organismal_11pubsub2_ext_9CisModule_sub1, __pyx_setprop_10organismal_11pubsub2_ext_9CisModule_sub1, 0, 0},
  {(char *)"sub2", __pyx_getprop_10organismal_11pubsub2_ext_9CisModule_sub2, __pyx_setprop_10organismal_11pubsub2_ext_9CisModule_sub2, 0, 0},
  {(char *)"op", __pyx_getprop_10organismal_11pubsub2_ext_9CisModule_op, __pyx_setprop_10organismal_11pubsub2_ext_9CisModule_op, 0, 0},
  {(char *)"gene", __pyx_getprop_10organismal_11pubsub2_ext_9CisModule_gene, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10organismal_11pubsub2_ext_CisModule = {
  PyVarObject_HEAD_INIT(0, 0)
  "organismal.pubsub2_ext.CisModule", /*tp_name*/
  sizeof(struct __pyx_obj_10organismal_11pubsub2_ext_CisModule), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10organismal_11pubsub2_ext_CisModule, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  __pyx_pw_10organismal_11pubsub2_ext_9CisModule_3__cmp__, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_10organismal_11pubsub2_ext_9CisModule_9__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "A proxy to a CisModule.\n    ", /*tp_doc*/
  __pyx_tp_traverse_10organismal_11pubsub2_ext_CisModule, /*tp_traverse*/
  __pyx_tp_clear_10organismal_11pubsub2_ext_CisModule, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10organismal_11pubsub2_ext_CisModule, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10organismal_11pubsub2_ext_CisModule, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10organismal_11pubsub2_ext_CisModule, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_10organismal_11pubsub2_ext_NetworkCollection __pyx_vtable_10organismal_11pubsub2_ext_NetworkCollection;

static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext_NetworkCollection(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *)o);
  p->__pyx_vtab = __pyx_vtabptr_10organismal_11pubsub2_ext_NetworkCollection;
  new((void*)&(p->cnetworks)) pubsub2::cNetworkVector();
  p->factory = ((struct __pyx_obj_10organismal_11pubsub2_ext_Factory *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10organismal_11pubsub2_ext_NetworkCollection(PyObject *o) {
  struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *p = (struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(&p->cnetworks);
  Py_CLEAR(p->factory);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_10organismal_11pubsub2_ext_NetworkCollection(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *p = (struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *)o;
  if (p->factory) {
    e = (*v)(((PyObject*)p->factory), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10organismal_11pubsub2_ext_NetworkCollection(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *p = (struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *)o;
  tmp = ((PyObject*)p->factory);
  p->factory = ((struct __pyx_obj_10organismal_11pubsub2_ext_Factory *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_10organismal_11pubsub2_ext_NetworkCollection(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_10organismal_11pubsub2_ext_17NetworkCollection_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_4size_1__get__(o);
}

static PyObject *__pyx_getprop_10organismal_11pubsub2_ext_17NetworkCollection_factory(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_7factory_1__get__(o);
}

static PyMethodDef __pyx_methods_10organismal_11pubsub2_ext_NetworkCollection[] = {
  {"add", (PyCFunction)__pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_3add, METH_O, 0},
  {"mutate", (PyCFunction)__pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_12mutate, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10organismal_11pubsub2_ext_NetworkCollection[] = {
  {(char *)"size", __pyx_getprop_10organismal_11pubsub2_ext_17NetworkCollection_size, 0, 0, 0},
  {(char *)"factory", __pyx_getprop_10organismal_11pubsub2_ext_17NetworkCollection_factory, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_NetworkCollection = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_10organismal_11pubsub2_ext_NetworkCollection, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_NetworkCollection = {
  0, /*mp_length*/
  __pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_10organismal_11pubsub2_ext_NetworkCollection = {
  PyVarObject_HEAD_INIT(0, 0)
  "organismal.pubsub2_ext.NetworkCollection", /*tp_name*/
  sizeof(struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10organismal_11pubsub2_ext_NetworkCollection, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_10__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_NetworkCollection, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_NetworkCollection, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10organismal_11pubsub2_ext_NetworkCollection, /*tp_traverse*/
  __pyx_tp_clear_10organismal_11pubsub2_ext_NetworkCollection, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_10organismal_11pubsub2_ext_17NetworkCollection_7__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10organismal_11pubsub2_ext_NetworkCollection, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10organismal_11pubsub2_ext_NetworkCollection, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10organismal_11pubsub2_ext_NetworkCollection, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct____get__ *__pyx_freelist_10organismal_11pubsub2_ext___pyx_scope_struct____get__[8];
static int __pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct____get__ = 0;

static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext___pyx_scope_struct____get__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct____get__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct____get__)))) {
    o = (PyObject*)__pyx_freelist_10organismal_11pubsub2_ext___pyx_scope_struct____get__[--__pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct____get__];
    memset(o, 0, sizeof(struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct____get__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10organismal_11pubsub2_ext___pyx_scope_struct____get__(PyObject *o) {
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct____get__ *p = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct____get__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct____get__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct____get__)))) {
    __pyx_freelist_10organismal_11pubsub2_ext___pyx_scope_struct____get__[__pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct____get__++] = ((struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct____get__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10organismal_11pubsub2_ext___pyx_scope_struct____get__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct____get__ *p = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct____get__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10organismal_11pubsub2_ext___pyx_scope_struct____get__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct____get__ *p = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct____get__ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_10organismal_11pubsub2_ext_Network *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_10organismal_11pubsub2_ext___pyx_scope_struct____get__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "organismal.pubsub2_ext.__pyx_scope_struct____get__", /*tp_name*/
  sizeof(struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct____get__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10organismal_11pubsub2_ext___pyx_scope_struct____get__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10organismal_11pubsub2_ext___pyx_scope_struct____get__, /*tp_traverse*/
  __pyx_tp_clear_10organismal_11pubsub2_ext___pyx_scope_struct____get__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10organismal_11pubsub2_ext___pyx_scope_struct____get__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr *__pyx_freelist_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr[--__pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_i);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr[__pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct____get__ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_i);
  p->__pyx_v_i = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "organismal.pubsub2_ext.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  __pyx_tp_clear_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__ *__pyx_freelist_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__[8];
static int __pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__ = 0;

static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__)))) {
    o = (PyObject*)__pyx_freelist_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__[--__pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__];
    memset(o, 0, sizeof(struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__(PyObject *o) {
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__ *p = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__)))) {
    __pyx_freelist_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__[__pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__++] = ((struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__ *p = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__ *p = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_10organismal_11pubsub2_ext_Gene *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "organismal.pubsub2_ext.__pyx_scope_struct_2___get__", /*tp_name*/
  sizeof(struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__, /*tp_traverse*/
  __pyx_tp_clear_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr *__pyx_freelist_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr = 0;

static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_freelist_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr[--__pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_i);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr)))) {
    __pyx_freelist_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr[__pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_i);
  p->__pyx_v_i = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "organismal.pubsub2_ext.__pyx_scope_struct_3_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  __pyx_tp_clear_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__ *__pyx_freelist_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__[8];
static int __pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__ = 0;

static PyObject *__pyx_tp_new_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__)))) {
    o = (PyObject*)__pyx_freelist_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__[--__pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__(PyObject *o) {
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__ *p = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_i);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__)))) {
    __pyx_freelist_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__[__pyx_freecount_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__++] = ((struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__ *p = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__ *)o;
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__ *p = (struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__ *)o;
  tmp = ((PyObject*)p->__pyx_v_i);
  p->__pyx_v_i = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "organismal.pubsub2_ext.__pyx_scope_struct_4___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__, /*tp_traverse*/
  __pyx_tp_clear_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "pubsub2_ext",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_ChannelState, __pyx_k_ChannelState, sizeof(__pyx_k_ChannelState), 0, 0, 1, 0},
  {&__pyx_kp_s_ChannelStateFrozen, __pyx_k_ChannelStateFrozen, sizeof(__pyx_k_ChannelStateFrozen), 0, 0, 1, 0},
  {&__pyx_kp_s_CisModule, __pyx_k_CisModule, sizeof(__pyx_k_CisModule), 0, 0, 1, 0},
  {&__pyx_kp_s_Gene, __pyx_k_Gene, sizeof(__pyx_k_Gene), 0, 0, 1, 0},
  {&__pyx_n_s_Gene___get___locals_genexpr, __pyx_k_Gene___get___locals_genexpr, sizeof(__pyx_k_Gene___get___locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_NetworkCollection, __pyx_k_NetworkCollection, sizeof(__pyx_k_NetworkCollection), 0, 0, 1, 0},
  {&__pyx_n_s_NetworkCollection___iter, __pyx_k_NetworkCollection___iter, sizeof(__pyx_k_NetworkCollection___iter), 0, 0, 1, 1},
  {&__pyx_n_s_Network___get___locals_genexpr, __pyx_k_Network___get___locals_genexpr, sizeof(__pyx_k_Network___get___locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_Operand, __pyx_k_Operand, sizeof(__pyx_k_Operand), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_cis_count, __pyx_k_cis_count, sizeof(__pyx_k_cis_count), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_cue_channels, __pyx_k_cue_channels, sizeof(__pyx_k_cue_channels), 0, 0, 1, 1},
  {&__pyx_n_s_factory, __pyx_k_factory, sizeof(__pyx_k_factory), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
  {&__pyx_n_s_gene_count, __pyx_k_gene_count, sizeof(__pyx_k_gene_count), 0, 0, 1, 1},
  {&__pyx_n_s_gene_mutation_rate, __pyx_k_gene_mutation_rate, sizeof(__pyx_k_gene_mutation_rate), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_module_count, __pyx_k_module_count, sizeof(__pyx_k_module_count), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_for_channel, __pyx_k_name_for_channel, sizeof(__pyx_k_name_for_channel), 0, 0, 1, 1},
  {&__pyx_n_s_op, __pyx_k_op, sizeof(__pyx_k_op), 0, 0, 1, 1},
  {&__pyx_n_s_operand, __pyx_k_operand, sizeof(__pyx_k_operand), 0, 0, 1, 1},
  {&__pyx_n_s_operands, __pyx_k_operands, sizeof(__pyx_k_operands), 0, 0, 1, 1},
  {&__pyx_n_s_out_channels, __pyx_k_out_channels, sizeof(__pyx_k_out_channels), 0, 0, 1, 1},
  {&__pyx_n_s_params, __pyx_k_params, sizeof(__pyx_k_params), 0, 0, 1, 1},
  {&__pyx_n_s_pub, __pyx_k_pub, sizeof(__pyx_k_pub), 0, 0, 1, 1},
  {&__pyx_n_s_pub_range, __pyx_k_pub_range, sizeof(__pyx_k_pub_range), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reg_channels, __pyx_k_reg_channels, sizeof(__pyx_k_reg_channels), 0, 0, 1, 1},
  {&__pyx_n_s_seed, __pyx_k_seed, sizeof(__pyx_k_seed), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_sequence, __pyx_k_sequence, sizeof(__pyx_k_sequence), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_n_s_sub1, __pyx_k_sub1, sizeof(__pyx_k_sub1), 0, 0, 1, 1},
  {&__pyx_n_s_sub2, __pyx_k_sub2, sizeof(__pyx_k_sub2), 0, 0, 1, 1},
  {&__pyx_n_s_sub_range, __pyx_k_sub_range, sizeof(__pyx_k_sub_range), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "organismal/pubsub2_ext.pyx":55
 *         to_string(self.cchannel_state, cstr)
 *         # I think it is much easier to understand if we reverse it
 *         s = cstr[::-1]             # <<<<<<<<<<<<<<
 *         env = s[:f.cue_channels]
 *         reg = s[f.cue_channels:cuereg]
 */
  __pyx_slice_ = PySlice_New(Py_None, Py_None, __pyx_int_neg_1); if (unlikely(!__pyx_slice_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice_);
  __Pyx_GIVEREF(__pyx_slice_);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initpubsub2_ext(void); /*proto*/
PyMODINIT_FUNC initpubsub2_ext(void)
#else
PyMODINIT_FUNC PyInit_pubsub2_ext(void); /*proto*/
PyMODINIT_FUNC PyInit_pubsub2_ext(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_pubsub2_ext(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("pubsub2_ext", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_organismal__pubsub2_ext) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "organismal.pubsub2_ext")) {
      if (unlikely(PyDict_SetItemString(modules, "organismal.pubsub2_ext", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_10organismal_11pubsub2_ext_ChannelStateFrozen = &__pyx_vtable_10organismal_11pubsub2_ext_ChannelStateFrozen;
  __pyx_vtable_10organismal_11pubsub2_ext_ChannelStateFrozen.init = (PyObject *(*)(struct __pyx_obj_10organismal_11pubsub2_ext_ChannelStateFrozen *, pubsub2::cFactory_ptr &, pubsub2::cChannelState &))__pyx_f_10organismal_11pubsub2_ext_18ChannelStateFrozen_init;
  if (PyType_Ready(&__pyx_type_10organismal_11pubsub2_ext_ChannelStateFrozen) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10organismal_11pubsub2_ext_ChannelStateFrozen.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_10organismal_11pubsub2_ext_ChannelStateFrozen.tp_dict, __pyx_vtabptr_10organismal_11pubsub2_ext_ChannelStateFrozen) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "ChannelStateFrozen", (PyObject *)&__pyx_type_10organismal_11pubsub2_ext_ChannelStateFrozen) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10organismal_11pubsub2_ext_ChannelStateFrozen = &__pyx_type_10organismal_11pubsub2_ext_ChannelStateFrozen;
  __pyx_vtabptr_10organismal_11pubsub2_ext_ChannelState = &__pyx_vtable_10organismal_11pubsub2_ext_ChannelState;
  __pyx_vtable_10organismal_11pubsub2_ext_ChannelState.__pyx_base = *__pyx_vtabptr_10organismal_11pubsub2_ext_ChannelStateFrozen;
  __pyx_type_10organismal_11pubsub2_ext_ChannelState.tp_base = __pyx_ptype_10organismal_11pubsub2_ext_ChannelStateFrozen;
  if (PyType_Ready(&__pyx_type_10organismal_11pubsub2_ext_ChannelState) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10organismal_11pubsub2_ext_ChannelState.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_10organismal_11pubsub2_ext_ChannelState.tp_dict, __pyx_vtabptr_10organismal_11pubsub2_ext_ChannelState) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "ChannelState", (PyObject *)&__pyx_type_10organismal_11pubsub2_ext_ChannelState) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10organismal_11pubsub2_ext_ChannelState = &__pyx_type_10organismal_11pubsub2_ext_ChannelState;
  if (PyType_Ready(&__pyx_type_10organismal_11pubsub2_ext_Factory) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10organismal_11pubsub2_ext_Factory.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Factory", (PyObject *)&__pyx_type_10organismal_11pubsub2_ext_Factory) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10organismal_11pubsub2_ext_Factory = &__pyx_type_10organismal_11pubsub2_ext_Factory;
  __pyx_vtabptr_10organismal_11pubsub2_ext_Network = &__pyx_vtable_10organismal_11pubsub2_ext_Network;
  __pyx_vtable_10organismal_11pubsub2_ext_Network.bind_to = (PyObject *(*)(struct __pyx_obj_10organismal_11pubsub2_ext_Network *, pubsub2::cNetwork_ptr &))__pyx_f_10organismal_11pubsub2_ext_7Network_bind_to;
  if (PyType_Ready(&__pyx_type_10organismal_11pubsub2_ext_Network) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10organismal_11pubsub2_ext_Network.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_10organismal_11pubsub2_ext_Network.tp_dict, __pyx_vtabptr_10organismal_11pubsub2_ext_Network) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "Network", (PyObject *)&__pyx_type_10organismal_11pubsub2_ext_Network) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10organismal_11pubsub2_ext_Network = &__pyx_type_10organismal_11pubsub2_ext_Network;
  if (PyType_Ready(&__pyx_type_10organismal_11pubsub2_ext_Gene) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10organismal_11pubsub2_ext_Gene.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Gene", (PyObject *)&__pyx_type_10organismal_11pubsub2_ext_Gene) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10organismal_11pubsub2_ext_Gene = &__pyx_type_10organismal_11pubsub2_ext_Gene;
  if (PyType_Ready(&__pyx_type_10organismal_11pubsub2_ext_CisModule) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10organismal_11pubsub2_ext_CisModule.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "CisModule", (PyObject *)&__pyx_type_10organismal_11pubsub2_ext_CisModule) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10organismal_11pubsub2_ext_CisModule = &__pyx_type_10organismal_11pubsub2_ext_CisModule;
  __pyx_vtabptr_10organismal_11pubsub2_ext_NetworkCollection = &__pyx_vtable_10organismal_11pubsub2_ext_NetworkCollection;
  __pyx_vtable_10organismal_11pubsub2_ext_NetworkCollection.get_at = (PyObject *(*)(struct __pyx_obj_10organismal_11pubsub2_ext_NetworkCollection *, size_t))__pyx_f_10organismal_11pubsub2_ext_17NetworkCollection_get_at;
  if (PyType_Ready(&__pyx_type_10organismal_11pubsub2_ext_NetworkCollection) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10organismal_11pubsub2_ext_NetworkCollection.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_10organismal_11pubsub2_ext_NetworkCollection.tp_dict, __pyx_vtabptr_10organismal_11pubsub2_ext_NetworkCollection) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "NetworkCollection", (PyObject *)&__pyx_type_10organismal_11pubsub2_ext_NetworkCollection) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10organismal_11pubsub2_ext_NetworkCollection = &__pyx_type_10organismal_11pubsub2_ext_NetworkCollection;
  if (PyType_Ready(&__pyx_type_10organismal_11pubsub2_ext___pyx_scope_struct____get__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10organismal_11pubsub2_ext___pyx_scope_struct____get__.tp_print = 0;
  __pyx_ptype_10organismal_11pubsub2_ext___pyx_scope_struct____get__ = &__pyx_type_10organismal_11pubsub2_ext___pyx_scope_struct____get__;
  if (PyType_Ready(&__pyx_type_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr.tp_print = 0;
  __pyx_ptype_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr = &__pyx_type_10organismal_11pubsub2_ext___pyx_scope_struct_1_genexpr;
  if (PyType_Ready(&__pyx_type_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__.tp_print = 0;
  __pyx_ptype_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__ = &__pyx_type_10organismal_11pubsub2_ext___pyx_scope_struct_2___get__;
  if (PyType_Ready(&__pyx_type_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr.tp_print = 0;
  __pyx_ptype_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr = &__pyx_type_10organismal_11pubsub2_ext___pyx_scope_struct_3_genexpr;
  if (PyType_Ready(&__pyx_type_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__.tp_print = 0;
  __pyx_ptype_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__ = &__pyx_type_10organismal_11pubsub2_ext___pyx_scope_struct_4___iter__;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "organismal/pubsub2_ext.pyx":8
 * import cython
 * # import numpy
 * from operand import Operand             # <<<<<<<<<<<<<<
 * 
 * # cimports
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Operand);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Operand);
  __Pyx_GIVEREF(__pyx_n_s_Operand);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_operand, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Operand); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Operand, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "organismal/pubsub2_ext.pyx":1
 * # distutils: include_dirs = NUMPY_PATH             # <<<<<<<<<<<<<<
 * # cython: boundscheck=False
 * # cython: wraparound=False
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pair.from_py":159
 * 
 * @cname("__pyx_convert_pair_from_py_size_t____size_t")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_size_t____size_t(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](X_from_py(x), Y_from_py(y))
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init organismal.pubsub2_ext", __pyx_clineno, __pyx_lineno, __pyx_filename);
      Py_DECREF(__pyx_d); __pyx_d = 0;
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init organismal.pubsub2_ext");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (PyErr_ExceptionMatches(PyExc_OverflowError))
                    PyErr_Clear();
                else
                    goto bad;
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_COMPILING_IN_CPYTHON
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

static CYTHON_INLINE pubsub2::signal_t __Pyx_PyInt_As_pubsub2_3a__3a_signal_t(PyObject *x) {
    const pubsub2::signal_t neg_one = (pubsub2::signal_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(pubsub2::signal_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(pubsub2::signal_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (pubsub2::signal_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(pubsub2::signal_t, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(pubsub2::signal_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(pubsub2::signal_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(pubsub2::signal_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(pubsub2::signal_t, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(pubsub2::signal_t,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(pubsub2::signal_t, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(pubsub2::signal_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(pubsub2::signal_t, long, PyLong_AsLong(x))
            } else if (sizeof(pubsub2::signal_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(pubsub2::signal_t, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            pubsub2::signal_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (pubsub2::signal_t) -1;
        }
    } else {
        pubsub2::signal_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (pubsub2::signal_t) -1;
        val = __Pyx_PyInt_As_pubsub2_3a__3a_signal_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to pubsub2::signal_t");
    return (pubsub2::signal_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to pubsub2::signal_t");
    return (pubsub2::signal_t) -1;
}

static CYTHON_INLINE pubsub2::operand_t __Pyx_PyInt_As_pubsub2_3a__3a_operand_t(PyObject *x) {
    const pubsub2::operand_t neg_one = (pubsub2::operand_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(pubsub2::operand_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(pubsub2::operand_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (pubsub2::operand_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(pubsub2::operand_t, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(pubsub2::operand_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(pubsub2::operand_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(pubsub2::operand_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(pubsub2::operand_t, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(pubsub2::operand_t,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(pubsub2::operand_t, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(pubsub2::operand_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(pubsub2::operand_t, long, PyLong_AsLong(x))
            } else if (sizeof(pubsub2::operand_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(pubsub2::operand_t, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            pubsub2::operand_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (pubsub2::operand_t) -1;
        }
    } else {
        pubsub2::operand_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (pubsub2::operand_t) -1;
        val = __Pyx_PyInt_As_pubsub2_3a__3a_operand_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to pubsub2::operand_t");
    return (pubsub2::operand_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to pubsub2::operand_t");
    return (pubsub2::operand_t) -1;
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(unsigned int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, long, PyLong_AsLong(x))
            } else if (sizeof(unsigned int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_pubsub2_3a__3a_sequence_t(pubsub2::sequence_t value) {
    const pubsub2::sequence_t neg_one = (pubsub2::sequence_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(pubsub2::sequence_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(pubsub2::sequence_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(pubsub2::sequence_t) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(pubsub2::sequence_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(pubsub2::sequence_t) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(pubsub2::sequence_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_pubsub2_3a__3a_signal_t(pubsub2::signal_t value) {
    const pubsub2::signal_t neg_one = (pubsub2::signal_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(pubsub2::signal_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(pubsub2::signal_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(pubsub2::signal_t) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(pubsub2::signal_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(pubsub2::signal_t) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(pubsub2::signal_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
#else
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
#endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            args = PyTuple_New(2);
            if (unlikely(!args)) goto bad;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
bad:
    Py_XDECREF(method);
    return result;
}

static PyObject *__Pyx_Generator_Next(PyObject *self);
static PyObject *__Pyx_Generator_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Generator_Close(PyObject *self);
static PyObject *__Pyx_Generator_Throw(PyObject *gen, PyObject *args);
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (unlikely(et != PyExc_StopIteration) &&
            unlikely(!PyErr_GivenExceptionMatches(et, PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (likely(!ev) || !PyObject_IsInstance(ev, PyExc_StopIteration)) {
            if (!ev) {
                Py_INCREF(Py_None);
                ev = Py_None;
            }
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = ev;
            return 0;
        }
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_IsInstance(ev, PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = PyObject_GetAttr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PyObject_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Generator_ExceptionClear(__pyx_GeneratorObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Generator_CheckRunning(__pyx_GeneratorObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Generator_SendEx(__pyx_GeneratorObject *self, PyObject *value) {
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    if (value) {
#if CYTHON_COMPILING_IN_PYPY
#else
        if (self->exc_traceback) {
            PyThreadState *tstate = PyThreadState_GET();
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Generator_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Generator_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Generator_FinishDelegation(__pyx_GeneratorObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Generator_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Generator_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Generator_FinishDelegation(gen);
    }
    return __Pyx_Generator_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Generator_Send(PyObject *self, PyObject *value) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Send(yf, value);
        } else {
            if (value == Py_None)
                ret = PyIter_Next(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Generator_FinishDelegation(gen);
    }
    return __Pyx_Generator_SendEx(gen, value);
}
static int __Pyx_Generator_CloseIter(__pyx_GeneratorObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Generator_Close(yf);
        if (!retval)
            return -1;
    } else {
        PyObject *meth;
        gen->is_running = 1;
        meth = PyObject_GetAttr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Close(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Generator_CloseIter(gen, yf);
        __Pyx_Generator_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Generator_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Generator_Throw(PyObject *self, PyObject *args) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Generator_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Generator_Undelegate(gen);
            if (err < 0)
                return __Pyx_Generator_SendEx(gen, NULL);
            goto throw_here;
        }
        gen->is_running = 1;
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Throw(yf, args);
        } else {
            PyObject *meth = PyObject_GetAttr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Generator_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Generator_FinishDelegation(gen);
        }
        return ret;
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Generator_SendEx(gen, NULL);
}
static int __Pyx_Generator_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Generator_clear(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    return 0;
}
static void __Pyx_Generator_dealloc(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label > 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
    __Pyx_Generator_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Generator_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    if (gen->resume_label <= 0)
        return ;
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Generator_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Generator_get_name(__pyx_GeneratorObject *self)
{
    Py_INCREF(self->gi_name);
    return self->gi_name;
}
static int
__Pyx_Generator_set_name(__pyx_GeneratorObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Generator_get_qualname(__pyx_GeneratorObject *self)
{
    Py_INCREF(self->gi_qualname);
    return self->gi_qualname;
}
static int
__Pyx_Generator_set_qualname(__pyx_GeneratorObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Generator_get_name, (setter)__Pyx_Generator_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Generator_get_qualname, (setter)__Pyx_Generator_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_GeneratorObject, is_running), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Generator_Send, METH_O, 0},
    {"throw", (PyCFunction) __Pyx_Generator_Throw, METH_VARARGS, 0},
    {"close", (PyCFunction) __Pyx_Generator_Close, METH_NOARGS, 0},
    {0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_GeneratorObject),
    0,
    (destructor) __Pyx_Generator_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Generator_traverse,
    0,
    0,
    offsetof(__pyx_GeneratorObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#else
    __Pyx_Generator_del,
#endif
    0,
#if PY_VERSION_HEX >= 0x030400a1
    __Pyx_Generator_del,
#endif
};
static __pyx_GeneratorObject *__Pyx_Generator_New(__pyx_generator_body_t body,
                                                  PyObject *closure, PyObject *name, PyObject *qualname) {
    __pyx_GeneratorObject *gen =
        PyObject_GC_New(__pyx_GeneratorObject, &__pyx_GeneratorType_type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    PyObject_GC_Track(gen);
    return gen;
}
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (__pyx_GeneratorType == NULL) {
        return -1;
    }
    return 0;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
